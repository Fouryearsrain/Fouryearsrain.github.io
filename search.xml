<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>c++学习之lambda c++与function函数</title>
    <url>/2020/08/01/%20c++%E5%AD%A6%E4%B9%A0%E4%B9%8Blambda%20c++%E4%B8%8Efunction%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="问题一：lambda函数"><a href="#问题一：lambda函数" class="headerlink" title="问题一：lambda函数"></a>问题一：lambda函数</h1><p><strong>lambda函数（匿名函数）</strong>：<br>C++在C11标准中引入了匿名函数,即没有名字的临时函数,又称之为lambda表达式.lambda表达式 实质上是创建一个匿名函数/对象。<br><strong>作用：</strong><br>可以在本作用域内自动调用所有变量 完成对应的函数要求（而且可以有返回值），可以理解为一种新的传参方式，但是经过测试无法跨作用域。也许对于大牛们是很方便的使用（小白的理解，还望大佬们改正）。<br><strong>格式</strong>：<br> <strong>[capture](parameters) mutable -&gt;return-type{statement}</strong><br>capture:捕获列表<br>parameters:参数列表，如果无需传参则可以连（）一同省去。<br>例如<br>[ ]-&gt;int{cout&lt;&lt;” a:  “&lt;&lt;a&lt;&lt;endl;return 0;}<br>return-type：返回类型 如果无需返回则可以将-&gt;省去<br>例如<br>[ ](int a){cout&lt;&lt;” a:  “&lt;&lt;a&lt;&lt;endl;}<br>statement：函数体  和普通函数一样。但是特别的是它除了可以使用参数列表中的参数还可以使用捕获的参数。但是特别的是最简单的表达式是**[ ]{}<strong>,即不可以省略大括号。<br>**捕获值 的方式：</strong></p>
<ol>
<li>值捕获，2.引用捕获,3.隐式捕获<br>值捕获：及类似函数传参的方式，通过数值拷贝传入lambda函数。相当于数值作用与两个作用域，两者互不相干。</li>
</ol>
<p><strong>但是注意的是，若想在函数体中改变参数的值需要加上mutable关键字（具体见代码）。</strong><br>2 引用捕获：及类似函数传参的时候加上&amp;引用标识符，及两个作用域修改的值相同。值的修改互相影响。<br>3 隐式捕获：即参数表中不标明具体的捕获数据类似[=]或者[&amp;]或者[=,&amp;i],[=i,&amp;]等。<br>ok 细节看代码（注释的明明白白，哈哈哈）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void play() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i &#x3D; 1024;</span><br><span class="line">    &#x2F;&#x2F;值捕获,类似函数传参（只是类似，传的参数不能修改即i&#x3D;10;会报错的）</span><br><span class="line">    &#x2F;&#x2F;解决上述问题的方法是加上mutable关键字。即</span><br><span class="line">    auto ptr0 &#x3D; [i]()mutable-&gt;void &#123;i &#x3D; 5;  cout &lt;&lt; i &lt;&lt; endl;&#125;;</span><br><span class="line">    ptr0();</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    auto ptr1 &#x3D; [i]()-&gt;void&#123;  cout &lt;&lt; i &lt;&lt; endl; &#125;;</span><br><span class="line">    ptr1();</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#x2F;&#x2F;引用捕获，类似函数参数加上引用符&amp;，两个作用域操作的为同一个数。</span><br><span class="line">    auto ptr2 &#x3D; [&amp;i] &#123; i &#x3D; 10; cout &lt;&lt; i &lt;&lt; endl; &#125;;</span><br><span class="line">    ptr2();</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#x2F;&#x2F;隐式捕获，及通过函数体的代码来推断需要捕获哪些变量，成为隐式捕获</span><br><span class="line">    auto ptr3 &#x3D; [&amp;] &#123;i &#x3D; 20; cout &lt;&lt; i &lt;&lt; endl; &#125;;</span><br><span class="line">    ptr3();</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说实话之前还不清楚，写到这突然想起之前写的QT项目，就利用过类似的connect函数也应该是一种匿名函数。哈哈哈。真好<br><img src="https://img-blog.csdnimg.cn/20200219221207132.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对吧哈哈哈。</p>
<h1 id="问题一：function函数"><a href="#问题一：function函数" class="headerlink" title="问题一：function函数"></a>问题一：function函数</h1><p><strong>作用：</strong><br>类模板std :: function是一个通用的多态函数包装器。 std :: function的实例可以存储，复制和调用任何可调用对象，如函数，lambda表达式，绑定表达式（bind）或其他函数对象，以及指向成员函数和指向数据成员的指针。<br>（是不是感觉有点花里胡哨，本小白感觉，其实他就是一种另类的多态，实现了函数协议的制定，推测在接口方面可能会弥补一些，类中多态的不足。因为他毕竟可以实现对你写的几乎所有函数在进一步封装。感觉用处应该是挺大。）<br>具体的用法就不再赘述，细节见代码（毕竟主要是一些基本语法）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;functional&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void mul(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; a * b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">class test &#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">     static void add(int a, int b)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">     void add2(int a, int b)</span><br><span class="line">     &#123;</span><br><span class="line">         cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">     &#125;</span><br><span class="line">     void operator()(int a, int b)</span><br><span class="line">     &#123;</span><br><span class="line">         cout &lt;&lt; a &#x2F; b &lt;&lt; endl;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    function&lt;void(int, int)&gt;fun1&#x3D; mul;</span><br><span class="line">    function&lt;void(int, int)&gt;fun2 &#x3D; test::add;</span><br><span class="line">    &#x2F;&#x2F;function&lt;void(int, int)&gt;fun2 &#x3D; test::add2;&#x2F;&#x2F;会报错说明只可以重载类中的静态函数</span><br><span class="line">    function&lt;void(int, int)&gt;fun3 &#x3D; test();&#x2F;&#x2F;类中的重载函数（由于重载作用于整个类的对象，所以逻辑上理解是类名加重载符）</span><br><span class="line">    function&lt;void(int, int)&gt;fun4 &#x3D; [&#x3D;](int a, int b) &#123;cout &lt;&lt; a - b &lt;&lt; endl; &#125;;&#x2F;&#x2F;包装lambda表达式</span><br><span class="line"></span><br><span class="line">    fun1(1, 2);</span><br><span class="line">    fun2(1, 2);</span><br><span class="line">    fun3(1, 2);</span><br><span class="line">    fun4(1, 2);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结果如下：<br><img src="https://img-blog.csdnimg.cn/20200219222732155.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>很明显代码中体现了，多态的思想。也对代码进一步简化。在封装接口必有大用。<br>（也希望读者能深刻体会到function的多态思想，大神就算了ORZ）</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>好久没写代码这么晚了，感觉还挺爽。<br>希望我的文章对读者能起点作用。<br>晚安。<br>（若有错误还请巨巨们不吝赐教，在此谢过）。</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用</title>
    <url>/2020/08/04/Git/</url>
    <content><![CDATA[<h1 id="Github的学习使用"><a href="#Github的学习使用" class="headerlink" title="Github的学习使用"></a>Github的学习使用</h1><h2 id="git组成："><a href="#git组成：" class="headerlink" title="git组成："></a>git组成：</h2><pre><code>  首先 git是由两个大块组成：
  1.工作区；
  2.版本库；
      2.1：缓存区；
      2.2：master分支（当你每次commit后都会形成一个新的版本，也就是代码的1.0，2.0等等）</code></pre>
<h2 id="git提交命令："><a href="#git提交命令：" class="headerlink" title="git提交命令："></a>git提交命令：</h2><pre><code> 1.git status 查看git的状态；
 其中包括文件的状态，这里指的说明的是。当你对该目录下某一文件未进行任何git操作时就会显示对该文件untracked
 ![untracked](C:\Users\四年 rain\Desktop\捕获.PNG)_
 2.git add + 文件名（或者用.表示全部文件）
     将文件加到暂存区
 3.git commit -m + “版本说明”
     这里指的是将暂存区的文件放到放到仓库中。也就是形成一个新的版本。而且这里的版本说明是必须的，其功能也就是类似日志文件来表明每个版本的区别。
 4.git remote add origin +&quot;仓库的地址&quot;
     值得一提的是这里的origin 只不过是个名字代称，也就是说可以改成其他的名字，比如git remote add aaa+&quot;仓库地址名&quot;
     功能的话就是后面进行push操作会更加方便(不用重新输入地址)
     如果错误的话 可以使用git remote rm origin ,然后重新设置，（或者可以直接换个名字重新设置）
 5.git remote -v
     这就是查询你已经添加的仓库的url 的简写
 6.git push -u origin master
      这里的origin就是第4.添加的简写。
      功能：将masetr分支里的内容添加到github对应的仓库</code></pre>
<h2 id="git-远程仓库克隆和共享"><a href="#git-远程仓库克隆和共享" class="headerlink" title="git 远程仓库克隆和共享"></a>git 远程仓库克隆和共享</h2><pre><code> 首先当你加入一个项目修改时第一步就是现将仓库下载到你的本地。
 1.git clone + 仓库地址（如：git@github.com:Fouryearsrain/111.txt.git）
     这里先建个文件夹然后 git bash here
     再输入该命令即可。
 2.git pull origin master
     当别人对代码进行修改的时候，就可以对其进行pull操作。
     (这里值得注意的是pull和clone有相似之处，都是将远程仓库下载到本地，但是其实 clone只在第一次的时候使用，之后的下载都是使用pull)</code></pre>
<h2 id="分支相关介绍："><a href="#分支相关介绍：" class="headerlink" title="分支相关介绍："></a>分支相关介绍：</h2><pre><code>     就是储存各个版本代码。默认的情况下只有一个master分支，每当你进行提交一次就会对版本进行一次更新。也就是提交到master分支中。而且下载默认也是从master分支中的最新版本进行下载。
     （这里指的注意的是假如版本2.0和版本1.0共享以一个A文件，这两版本中该文件相同，那么2.0对应存储的A文件其实就是1.0中的一个连接，A文件实际存储在1.0中。这里就是git内部对仓库存储的优化）
     然而，我们经常会更新代码完成后未对其进行真正全面的测试，也就是担心会有bug，这时候我们的操作都是再创建一个分支，来存储新完成的代码，在我们确定代码完成无误后。再将代码放到master中。
     分支创建命令：
     git branch temp
     创建了一个叫做temp的分支。
     对于处理就是将上面命令中的master改成temp
     切换分支的命令：
     git checkout temp
     切换到temp分支中</code></pre>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux_day3</title>
    <url>/2020/08/01/Linux-day3/</url>
    <content><![CDATA[<h1 id="Linux-进程间通信-mmap-pipe-fifo"><a href="#Linux-进程间通信-mmap-pipe-fifo" class="headerlink" title="Linux-进程间通信(mmap,pipe,fifo)"></a>Linux-进程间通信(mmap,pipe,fifo)</h1><h1 id="mmap"><a href="#mmap" class="headerlink" title="mmap:"></a>mmap:</h1><p>mmap也就是共享内存。通过借助共享内存存放到磁盘文件，然后 就可以借助指针来访问共享内存，达到通信的效果。而如何借助mmap来实现呢，也就是一个函数的事—&gt;mmap（由于mmap较为复杂，所以需要先讲一下原函数）<br>  原函数：<strong>void *mmap(void *addr,size_t length, int prot, int flags,intn fd, off_t offset)</strong>;<br>   返回值：成功：映射区首地址，失败：MAP_FAILED 这个宏<br>   参数：<br>   addr: 建立映射区的首地址，由linux内核决定，使用的时候直接传递NULL即可。<br>   length: 想创建的映射区的大小<br>   prot: 映射区权限（不是文件权限） 有三个宏： PROT_READ, PROT_WRITE, PROT_READ|PROT_WRITE(读，写，读和写)<br>   flags: 标志位参数（主要用来设定更新物理内存，设置共享，创建匿名映射区）<br>               主要的两个宏：<br>                                   MAP_SHARED :将映射区的操作反映到物理设备（磁盘）<br>                                   MAP_PRIVATE: 映射区所做的修改不会反映到物理设备<br>                                   （由于我们需要达到进程间通信的目的，所以需要我们一般使用MAP_SHARED）<br>   fd: 用来建设映射区的文件描述符<br>   offset:映射文件的偏移（4K的整数倍，（4k=4096)）<br>   使用mmap的注意事项：<br>   1.当你使用mmap的fd文件如果为刚创建的文件则，需要使用<strong>ftruncate(fd,size)**来拓展一下文件。是因为不能使用mmap来创建一个空大小的文件映射区（第二个参数不能为零）。而且映射区的大小必须小于文件的大小<br>   2.munmap（关闭映射区）指定的地址和mmap返回的地址必须保持一致。二者不能有偏差。<br>   3.mmap的权限（第三个参数）必须</strong>小于等于**打开文件对应的权限。（注意：mmap创建映射区的时候时隐含一次读操作,所以当你开文件的时候必须有O_RDONLY这个权限）<br>   4.由于映射区是由内核中的mmu进行映射，而mmu的单位就是4K<br>   5.注意mmap应检测返回值<br>   6.一旦建立好文件映射区，文件描述符就可以关闭。<br>   简单实例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;sys&#x2F;mman.h&gt;</span><br><span class="line">#include&lt;sys&#x2F;wait.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    pid_t pid;</span><br><span class="line">    int fd&#x3D;open(&quot;temp&quot;,O_RDWR|O_CREAT|O_TRUNC,0644);</span><br><span class="line">    if(fd&lt;0)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;open error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    unlink(&quot;temp&quot;);&#x2F;&#x2F;删除临时文件的目录项，使之具备被释放条件</span><br><span class="line">    &#x2F;&#x2F;当占用该文件的所有进程结束时，该文件就被释放</span><br><span class="line">    ftruncate(fd,1024);</span><br><span class="line">    char *p;</span><br><span class="line">    p&#x3D;mmap(NULL,1024,PROT_READ|PROT_WRITE,MAP_SHARED,fd,0);</span><br><span class="line">    if(p&#x3D;&#x3D;MAP_FAILED)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;mmapfailed&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    pid&#x3D;fork();</span><br><span class="line">    if(pid&lt;0)</span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">        perror(&quot;mmapfailed&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    else if(pid&#x3D;&#x3D;0)&#123;</span><br><span class="line">        strcpy(p,&quot;mmap changed&quot;);</span><br><span class="line">        printf(&quot;son :%s\n&quot;,p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        sleep(1);</span><br><span class="line">        printf(&quot;father: %s\n&quot;,p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    munmap(p,1024);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200507145912671.PNG#pic_center" alt="在这里插入图片描述"></p>
<p>（补充一下：既然我们可以利用同一个文件描述符进行通信，那我们也可以在血缘关系中利用主参数传参进行对同一个文件进行通信，原理一模一样）</p>
<p>mmap匿名通信：如果你不想借助文件，只借助mmap就可以使用mmap匿名通信，也就是在第四个参数或上MAP_ANON，并将文件标识符设置为-1。由于区别不大所以直接看代码就行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;sys&#x2F;mman.h&gt;</span><br><span class="line">#include&lt;sys&#x2F;types.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">pid_t pid;</span><br><span class="line"></span><br><span class="line">char *fun&#x3D;(char *)mmap(NULL,1024,PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANON,-1,0);</span><br><span class="line">if(fun&#x3D;&#x3D;MAP_FAILED)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;mmap wrong&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line">pid&#x3D;fork();</span><br><span class="line">if(pid&lt;0)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;fork error&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line">else if(pid&#x3D;&#x3D;0)&#123;</span><br><span class="line">strcpy(fun,&quot;mmap shared\n&quot;);</span><br><span class="line">printf(&quot;son: %s&quot;,fun);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">sleep(1);</span><br><span class="line">printf(&quot;father: %s&quot;,fun);</span><br><span class="line">&#125;</span><br><span class="line">munmap(fun,1024);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200507145931298.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>蓝色标注线的地方就是结果</p>
<h1 id="pipe（无名管道）："><a href="#pipe（无名管道）：" class="headerlink" title="pipe（无名管道）："></a>pipe（无名管道）：</h1><p>管道是一种最基本的ipc机制（IPC是Inter-Process Communication的缩写，含义为进程间通信或者跨进程通信，是指两个进程之间进行数据交换的过程，也就是进程间的通信）<br>作用于有关系(如父子关系)的进程之间。通过调用pipe函数即可创建。并且有以下几个特点<br>    1.为一个伪文件（不占用系统内存）<br>    2.由两个文件描述符来操作，一个表示读取数据，一个表示写入数据<br>    3.数据从管道的写段流入，从读端流出。<br>原理：<br>管道为内核使用环形队列机制，借助内核缓冲区（4k，可以用ulimit -a查看（会发现共有八个扇区（512字节）） ）实现。<br>管道的局限性：<br>    1.数据不能自己读同时自己写<br>    2.数据一旦被读走就会丢失，不可以重复读<br>    3.由于管道采取双向半双工的通信方式，因此数据只能在一个方向上流动。<br>    4.只能在有公共祖先的进程间使用<br>/* 这里说明一下什么是双向半双工，我们先假设有A,B这两个进程需要利用管道进行通信，A可以给B发数据，B也可以给A发数据，这就是双向。但是 当A给B发信息的时候，B不能同时给A发信息，必须得等A发完信息后才可以通过修改一定的配置（就是修改操作管道的那两个文件描述符），让B发给A信息。这种不能同时相互通信就是半双工，如果是起到两个人打电话的功能，就是全双工*/<br>具体实现代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int fd[2];</span><br><span class="line">    pid_t pid;</span><br><span class="line">    int ret&#x3D;pipe(fd);</span><br><span class="line">    if(ret&#x3D;&#x3D;-1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;pipe error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    pid &#x3D;fork();</span><br><span class="line">    if(pid&#x3D;&#x3D;-1)</span><br><span class="line">    &#123;</span><br><span class="line">    perror(&quot;fork error&quot;);</span><br><span class="line">    exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    else if(pid&#x3D;&#x3D;0)&#x2F;&#x2F;子进程</span><br><span class="line">    &#123;</span><br><span class="line">    close(fd[1]);&#x2F;&#x2F;关闭写端</span><br><span class="line">    sleep(1);&#x2F;&#x2F;睡一会防止子进程提前读</span><br><span class="line">    char buf[100];</span><br><span class="line">    ret&#x3D;read(fd[0],buf,sizeof(buf));</span><br><span class="line">    if(ret&#x3D;&#x3D;0)</span><br><span class="line">    &#123;</span><br><span class="line">    printf(&quot;nothing\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    write(STDOUT_FILENO,buf,ret);&#x2F;&#x2F;将buf写到标准输出上（就是打印一下）</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        close(fd[0]);&#x2F;&#x2F;关闭读端;</span><br><span class="line">        write(fd[1],&quot;my pipe\n&quot;,strlen(&quot;my pipe\n&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="fifo（有名管道）"><a href="#fifo（有名管道）" class="headerlink" title="fifo（有名管道）:"></a>fifo（有名管道）:</h1><p>fifo 的原理与pipe类似，这里就不再赘述。我们谈一下其中的差别：<br><strong>1.fifo有名管道，也就是在你编写程序之前，需要利用<br><em>mkfifo myfifo</em>来创造一个fifo文件。以便以后面的使用<br>2.fifo与pipe不同的是，fifo需要利用open函数进行打开<br>写端：<br>int fd=open(argv[1],O_WRONLY);//argv[1]是主函数传的参数<br>读端：<br>int fd=open(argv[1],O_RDONLY);//argv[1]是主函数传的参数<br>然后通过文件描述符进行读写。<br>3.当你使用fifo打开一端时，比如读端，程序就会在在阻塞等待fifo另一端（写端）打开。反之亦然。</strong><br>读端代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;sys&#x2F;wait.h&gt;</span><br><span class="line">#include&lt;sys&#x2F;types.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    if(argc!&#x3D;2)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;main error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    int fd&#x3D;open(argv[1],O_RDONLY);</span><br><span class="line">    char buf[1024];</span><br><span class="line">    int num&#x3D;0;</span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(1);</span><br><span class="line">        memset(buf,0,sizeof(buf));</span><br><span class="line">        read(fd,buf,1024);</span><br><span class="line">printf(&quot;%s\n&quot;,buf);</span><br><span class="line">        sleep(1);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>写端代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;sys&#x2F;wait.h&gt;</span><br><span class="line">#include&lt;sys&#x2F;types.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    if(argc!&#x3D;2)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;main error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    int fd&#x3D;open(argv[1],O_WRONLY);</span><br><span class="line">    char buf[1024];</span><br><span class="line">    int num&#x3D;0;</span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">        memset(buf,0,sizeof(buf));</span><br><span class="line">        sprintf(buf,&quot;坤坤爱篮球%d&quot;,num++);</span><br><span class="line">        write(fd,buf,sizeof(buf));</span><br><span class="line">        sleep(1);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>fw 为写端的程序 myfifo是之前利用mkfifo命令创建的 fifo文件<br><img src="https://img-blog.csdnimg.cn/20200507160816103.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>fr为读端的应用程序<br><strong>注：而且运行时，博主是先打开写端，后打开读端，然而读端仍然是从0开始打印，所以可以体现写端阻塞等待。</strong><br><img src="https://img-blog.csdnimg.cn/20200507161207292.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><p>追踪段错误的方法：首先gcc -g进行编译 ，然后 gdb直接调试，run之后代码停止的行数就是出现段错误的位置。</p>
<p><strong>目录项：目录项中存储了inode的编号。inode 是一种结构体，存放了该文件的大小，权限，类型，所有者，和一个存储地址的指针（该指针指向文件内容在磁盘上的位置）。而创建一个硬连接实际上就是创建一个目录项，unlink就是删除一个硬链接。而正常情况一个文件对应一个目录项。所以在你删除该目录项之后，系统就会自动将不被占用且没有目录项的inode释放。放置空间占用。而且我们在进行进程间通信的时候，只需要使用该文件达到通信的功能，而通信的内容不用保存，所以这个时候，就可以将临时文件unlink掉，使进程结束的时候空间被自动释放。</strong></p>
<p>strace +可执行文件：追踪可执行文件执行的系统调用。</p>
<h3 id="告诫："><a href="#告诫：" class="headerlink" title="告诫："></a>告诫：</h3><p>花里胡哨的不要碰<del>~</del></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux_day1</title>
    <url>/2020/08/01/Linux-day1/</url>
    <content><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p><em>纠结了一会不知道该怎么写，这里我就一些重要的点进行叙述，如有错误，还请各位不吝赐教</em></p>
<h2 id="程序和进程的区别"><a href="#程序和进程的区别" class="headerlink" title="程序和进程的区别"></a>程序和进程的区别</h2><p>程序 只占用磁盘空间，进程占用系统资源<br>也就是说程序是一个静态的概念，进程是一个动态的概念。</p>
<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>并发，在操作系统中，一个时间段中有多个进程都处于已启动运行到运行完毕的状态，但在任意一个时间点上只有一个进程在运行。而如何达到宏观上多个线程同时执行的效果呢，就是利用信号 时钟等处理方式让CPU快速切换时间片达到无法察觉的程度。</p>
<h2 id="CPU和MMU简单架构"><a href="#CPU和MMU简单架构" class="headerlink" title="CPU和MMU简单架构"></a>CPU和MMU简单架构</h2><p>CPU简单架构示意图：<img src="https://img-blog.csdnimg.cn/20200418112237225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>MMU简单架构示意图：<br><img src="https://img-blog.csdnimg.cn/20200418112319235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center"><br><strong>（.text存放代码段.rodata只读数据.bss未初始化的数据.heap为堆区空间增长方向为从下到上.stack为栈区空间.增长方向为从上到下）</strong><br>mmu功能1：<br>处理虚拟内存与实际物理内存的映射关系，图中示意就是0<del>3G为用户区，所以数据通过MMU映射之后，指向的是不同内存空间。而内核区3G到4G的空间则对应的是则是同一块内存空间（只有一个内核，但是两个进程的PCB的内容不一样，只是位于同一块物理内存（具体细节老实说不需要掌握，希望有大佬知道的话不吝赐教））。<br>（此处为MMU的粗略解释，后面的博文会介绍到MMU的三页表机制，会详细叙述MMU的功能）<br>(注意这里是以32位为例所以虚拟内存的映射空间为4G，若电脑为64位，那么与虚拟内存空间为2^64B)<br>mmu功能2：<br>设置修改内存访问级别（对于CPU而言一般有四个访问（0</del>3四级）级别而Linux只用到三级和零级，举个例子就是printf函数是用户级别的也就是3级访问级别，而printf会调用硬件I/O,就会涉及到0级访问级别，而MMU就是帮他完成切换）</p>
<h2 id="PCB进程控制块"><a href="#PCB进程控制块" class="headerlink" title="PCB进程控制块"></a>PCB进程控制块</h2><p>Linux内核的进程控制块是<strong>task_struct</strong>结构体，而结构体的成员有很多，重点掌握的为以下几点：<br>1.进程id,系统中的每个进程中唯一的id,在c语言中用pid_t表示（就是一个非负整数）<br>2.进程的状态，就绪，运行，挂起，停止等状态<br>3.进程切换时需要保存和恢复的一些CPU寄存器<br>4.描述虚拟地址空间的信息<br>5.描述控制终端的信息<br>6.当前的工作目录<br>7.umask掩码<br>8文件描述符，包含很多指向file结构体的指针。<br>9.和信号相关的信息<br>10.用户id和组id<br>11.会话(守护进程会用到)和进程组<br>12.进程可以使用的资源上限</p>
<h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><p>有初始态，就绪态，运行态，挂起态，终止态。（初始态和就绪态常常分为一种状态）</p>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>因为Linux操作系统是 多用户多任务的开元操作系统 也就是说 同一时间点可以多个用户用同一账号登录同一台计算机。而又因为 每个用户的操作习惯不同，但是 如果每次都需要更改操作系统的配置就太麻烦了，所以这时候环境变量的作用就体现出来了，每个用户可以根据自己的使用习惯更改环境变量。因为 当你改完当前用户的环境变量之后，环境信息会发生改变，就比如shell解析器执行 /bin/date 的时候就是根据shell的环境变量PATH中的目录来查找执行的文件。<br>特征和更改方式（当更新环境变量时尽量将新设定的环境变量放在行首，会加快程序运行速度）<br>① 字符串(本质) ② 有统一的格式：名=值[:值] ③ 值用来描述进程环境信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;比较常用的环境变量</span><br><span class="line">echo $PATH&#x2F;&#x2F;制定可执行文件的搜索路径</span><br><span class="line">echo $SHELL&#x2F;&#x2F;记录当前使用的命令解析器</span><br><span class="line">echo $TERM &#x2F;&#x2F;当前终端的类型</span><br><span class="line">echo $HOME&#x2F;&#x2F;记录当前使用的家目录</span><br><span class="line">echo $LANG&#x2F;&#x2F;记录指定语言环境</span><br></pre></td></tr></table></figure>
<h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p>fork函数，创建子进程（注意该函数会有两个返回值，如果为父进程执行的函数则会返回子进程id,子进程返回0）。<br>fork函数的意义所在就是创建多个子进程，但是如何创建n个子进程？<br>如果你直接<br>for(int i=0;i&lt;n;i++)<br>{<br>pid_t pid=fork();<br>}<br>不可能达到你预期的效果，因为你调用fork函数时你的预期效果时，只有原来的进程执行fork函数，而其他子进程不执行，而事实并非如此。当循环因子i为0时就会产生1个子进程和原来的父进程，所以当前会有两个进程。而当循环因子为1时就会子进程和父进程重新创建各自的子进程变成4。而且会由于竞争CPU的原因导致，主进程完事了，还有一大堆子进程还在创建。很容易导致孤儿进程和僵尸进程。<br><strong>此处为大家提供一个简单的循环创建n个子进程的架构（以后直接套就行了）：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#inlcude&lt;unistd.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">pid_t pid;</span><br><span class="line">int i;</span><br><span class="line">int n;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">for(i&#x3D;0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">pid&#x3D;fork();</span><br><span class="line">if(pid&#x3D;&#x3D;-1)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;fork error\n&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line">else if(pid&#x3D;&#x3D;0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%dthprocess,father&#x3D;%d iam%d&quot;,i+1,getppid(),getpid());</span><br><span class="line">break;&#x2F;&#x2F;因为若该进程为子进程那么直接跳出循环</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面叙述时涉及到僵尸进程和孤儿进程这两个方面，在此介绍一下<br><strong>孤儿进程: 父进程先于子进程结束，则子进程成为孤儿进程，子进程的父进程成为init进程，称为init进程领养孤儿进程。（init进也被称为进程孤儿院）<br>僵尸进程: 进程终止，父进程尚未回收，子进程残留资源（PCB）存放于内核中，变成僵尸（Zombie）进程，<br>注意僵尸进程不能用kill杀死，因为僵尸进程已经死亡只是残留物而已<br>而且pcb存在的意义是为父进程更好的回收子进程，但是可能父进程进程没有回收，产生僵尸进程</strong><br>而且用 ps aux 时 R 表示运行 S表示后台运行 Z表示僵尸僵尸进程。</p>
<h2 id="进程共享"><a href="#进程共享" class="headerlink" title="进程共享"></a>进程共享</h2><p>父子进程共享原则：<strong>读时共享写时复制的原则</strong><br>刚fork时的父子进程差别与相同之处：<br>相同：全局变量，.data,.text,堆,栈，环境变量，用户ID，宿主目录，进程工作目录，信号处理方式…<br>不同之处：1，进程ID 2，fork返回值    3，父进程ID    4，运行进程时间    5，闹钟（定时器）    6.未决信号集</p>
<h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p>注意（下面两个函数在fork函数执行前才有效）<br>set follow-fork-mode child 命令设置gdb在fork之后跟踪子进程。<br>set follow-fork-mode parent 设置跟踪父进程。</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>学完一节不总结的话 总感觉少了点什么。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux_day2</title>
    <url>/2020/08/01/Linux-day2/</url>
    <content><![CDATA[<h1 id="进程回收"><a href="#进程回收" class="headerlink" title="进程回收"></a>进程回收</h1><h2 id="回收子进程"><a href="#回收子进程" class="headerlink" title="回收子进程"></a>回收子进程</h2><p>所谓回收子进程就是为了回收僵尸进程和子进程，也就是两个函数的使用：<br><strong>wait（）</strong>和 <strong>waitpid()**很明显 waitpid就是在wait的基础上发展出来的函数<br>**wait三个特性：<br>1.阻塞等待子进程退出<br>2.回收子进程残留资源<br>3.获取子进程结束状态（退出原因）。</strong><br>参数列表如下：<br><img src="https://img-blog.csdnimg.cn/20200419141436634.PNG#pic_center" alt="在这里插入图片描述"><br>wait的唯一参数就是传出参数来实现第三个特性。<br>如果想判断wait的具体状态，就需要调用相应的宏来表明具体的进程退出状态<br> <strong>1.  WIFEXITED(status) 为非0    → 进程正常结束<br>    WEXITSTATUS(status) 如上宏为真，使用此宏 → 获取进程退出状态 (exit的参数)<br> 2.     WIFSIGNALED(status) 为非0 → 进程异常终止<br>    WTERMSIG(status) 如上宏为真，使用此宏 → 取得使进程终止的那个信号的编号。</strong><br>    说白了就是两套函数，status就是wait对应的传出参数<br>    而如果查询对应编号的信号，就可以用kill -l 命令查询对应的信号信息。<br><img src="https://img-blog.csdnimg.cn/20200419143025312.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在此提供第一套函数的用法，第二套函数用法类似。</p>
<p><strong>waitpid()</strong><br>之所以产生waipid那就肯定是因为wait不够好，<br>1.因为wait的函数只可以对<strong>单个最先死亡的子进程</strong>进行回收。<br>2. waitpid的第一个参数是可以指定单独要回收子进程的id.（比如说 你循环创建n个子进程，然后只想单独回收第n-1个子进程，那么使用wait函数就比较麻烦了，而你使用waitpid就可以单独指向第n-1个进程的id）<br>而且当你指定为-1的时候是对任意的的子进程进行回收（相当于wait）<br>              指定为0的时候回收当前调用waitpid一个组的任意子进程<br>              指定&lt;-1的时候回收指定进程组内的任意子进程 与<strong>kill -9 -进程组号</strong>功能类似<br>3.waitpid可以设定是否阻塞等待，也就是<strong>轮询</strong>，若设定为WNOHANG就是设定为非阻塞状态。<br>这里提供一个轮询的简单架构，回收n个子进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pid_t pid;</span><br><span class="line">do&#123;</span><br><span class="line">pid&#x3D;waitpid(-1,NULL,WNOHANG);</span><br><span class="line">if(pid&gt;0)</span><br><span class="line">&#123;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line">sleep(1);&#x2F;&#x2F;每一秒查询一次</span><br><span class="line">&#125;while(n&gt;0)</span><br></pre></td></tr></table></figure>

<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="execl函数族"><a href="#execl函数族" class="headerlink" title="execl函数族"></a>execl函数族</h3><p>术语：<br>在很多实际应用的场合，我们利用子进程是为了执行一些其他代码或者命令（比如让子进程去执行另一个程序）。所以我们就需要一些函数来帮助我们完成跳出父进程的代码，这也是exec函数族的意义所在。<br>（注意调用exec函数进程ID不会改变，但是会将原子进程的所有内容全部删除，并从新程序的主函数开始执行）<br>有六种(man查询有八种此处不再赘述)以exec开头的函数，统称为exec函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int execl(const char *path, const char *arg, ...);</span><br><span class="line">int execlp(const char *file, const char *arg, ...);</span><br><span class="line">int execle(const char *path, const char *arg, ..., char *const envp[]);</span><br><span class="line">int execv(const char *path, char *const argv[]);</span><br><span class="line">int execvp(const char *file, char *const argv[]);</span><br><span class="line">int execve(const char *path, char *const argv[], char *const envp[]);</span><br></pre></td></tr></table></figure>
<p>博主这里重点讲述前两种(因为 这六种功能相同只是形式不同而已)</p>
<p><strong>首先execlp函数：</strong><br>我们首先应该清楚的是：这里的 <strong>l</strong> 和 <strong>p</strong> 是分别指代的 list 和 path(环境变量<a href="https://editor.csdn.net/md/?articleId=105593413">不清楚的可以点一下</a>)。<br><img src="https://img-blog.csdnimg.cn/20200419110922884.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">上者是ubuntu查询man page的函数说明，<br>首先注意到execlp函数里面有 <strong>…</strong> 就是说这是一个不定数参数的函数，是因为在不同执行文件中的参数数目也不同，因此为了判定参数的输入终止，需要在函数调用的时候，<strong>最后一个参数设定为NULL.</strong><br>ok<br><strong>第一个参数就是一个可执行文件名</strong>，因为execlp是有一个p的所以，涉及到环境变量，那么执行文件的查找路径也是固定的，所以第一个参数就是一些命令，比如<strong>ls</strong>，那么后面的参数就是对应的参数列表，值得注意的是，函数的第二个参数，一般使用来传可执行文件名，也就是我们主函数中的<strong>arg[0]</strong>,但是我们在第一个参数已经将可执行文件传入，所以，这个参数可以直接传一个空（就是””或者”fasdgadfg”，<strong>但绝对不可以不传</strong>），然后从第二个参数开始传有用的参数，结尾必须使用 NULL这个参数，<br><img src="https://img-blog.csdnimg.cn/20200419112016892.PNG#pic_center" alt="在这里插入图片描述"><br>就是绿色的那种传参方式</p>
<p><strong>接下来就是execl</strong><br>因为这个不涉及p也就是环境变量，所以就可以用来执行自己设定的文件，就比较方便（但是刚才我用execlp调用相对路径下我自己写的可执行文件也好使，（也就是上图那个紫色的命令）这就很奇怪~，）<br>其实用法与execlp相似，只是第一个参数用来调用自己编写的可执行文件的相对路径或者绝对路径。<br>好了 execl就大概这些内容了，其他函数与此类似，到时候调用manpage查一下就可以了。</p>
<p>注意：exec函数族只有当执行失败的时候才会回到原来的进程接着执行下一条语句。<br>所以当只有一个进程的程序的时候，就不需要判断exec函数的返回值</p>
<h3 id="dup2"><a href="#dup2" class="headerlink" title="dup2"></a>dup2</h3><p>dup2可以起到重定向的作用。额~~<br>首先 Linux中文件描述符表我们能够使用的是从表中的第四个开始使用，也就是说前三个是已经被系统占用了。<br>第一个： stdin，输入； 第二个： stdout，输出；第三个： 第三个：stderr，错误。<br>比如 让你将当前终端的所有进程信息输入到一个文件中。你该怎么做呢？？<br>当然如果用 命令行就很简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps aux &gt; porcess&#x2F;&#x2F;注意这里的process只是一个普通文件名，可以自己人为定义</span><br><span class="line">&#x2F;&#x2F;然后执行</span><br><span class="line">cat process</span><br><span class="line">&#x2F;&#x2F;就可以查看所有的进程号了</span><br></pre></td></tr></table></figure>
<p>但是其实命令中也是利用了重定向的原理，就是将ps aux命令的输出不输出到屏幕而是打印到文件中。<br>所以 我们也可以利用此原理进行在程序中实现。<br><strong>但注意的是 dup2有两个参数，为了方便记忆，你可以理解为将第二个参数（文件描述符），指向第一个参数（文件描述符）</strong>，下面代码的原理就是将输出文件描述符指向out文件。<br>见一下源码<br><img src="https://img-blog.csdnimg.cn/20200419120256538.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后 cat一下生成的文件发现达到预期功能。（在此不作演示）</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习之this指针，初始化列表，const，static</title>
    <url>/2020/08/01/c-%E5%AD%A6%E4%B9%A0%E4%B9%8Bthis%E6%8C%87%E9%92%88%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8%EF%BC%8Cconst%EF%BC%8Cstatic/</url>
    <content><![CDATA[<h1 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h1><p><strong>this指针：</strong>，即类中指向自己本身的指针，可以用来表明类中的成员变量与成员函数中的参数的区别。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;代码一</span><br><span class="line">class person&#123;</span><br><span class="line">public: int age;</span><br><span class="line">public:</span><br><span class="line">void setage(int age)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;age&#x3D;age;&#x2F;&#x2F;最浅显用法</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在实际接触时this指针对于我这种小白来说接触不是太大，但是对于大牛们无疑是把利器。而我们能够了解this指针必将加快我们对深层代码工作原理的理解。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;代码二</span><br><span class="line">class person&#123;</span><br><span class="line">public: int age;</span><br><span class="line">public:</span><br><span class="line">void setage(person *this,int age)&#x2F;&#x2F;底层的代码</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;age&#x3D;age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码一和代码二的区别也是理解this指针的好处，这也为接下来讲述const成员函数的工作机制探究，埋下伏笔。</p>
<h1 id="问题二：初始化列表"><a href="#问题二：初始化列表" class="headerlink" title="问题二：初始化列表"></a>问题二：初始化列表</h1><p>当类中拥有特殊的变量，比如const型变量，或者把某个类当做成员变量，都不能通过普通的构造函数的方式进行初始化，需要利用初始化列表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class house &#123;</span><br><span class="line">private:</span><br><span class="line">    int size;</span><br><span class="line">    int price;</span><br><span class="line">public:</span><br><span class="line">    house(int num,int num2)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;size &#x3D; num;</span><br><span class="line">        this-&gt;price &#x3D; num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class person:public house </span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">        int a;</span><br><span class="line">        int b;</span><br><span class="line">        house c;</span><br><span class="line">    const int num;</span><br><span class="line">public:</span><br><span class="line">    person():num(10),b(10),house(10,20),c(20,30)</span><br><span class="line">    &#x2F;&#x2F;常量必须得用初始化列表进行初始化</span><br><span class="line">    &#x2F;&#x2F;普通变量可以利用初始化列表，也可以利用构造函数；</span><br><span class="line">    &#x2F;&#x2F;初始化列表执行顺序是按照定义变量的顺序（不考虑继承的情况）</span><br><span class="line">    &#x2F;&#x2F;（但是会先执行继承的父类构造函数，再执行house成员变量的构造函数，剩下的变量按照定义的顺序执行）</span><br><span class="line">    &#123;</span><br><span class="line">        a &#x3D; 10;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    person();</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>详情在代码注释处都一一列举了，这里都不再赘述，但是应该强调的是掌握初始化列表的执行顺序和初始化列表语法。</p>
<h1 id="问题三：const"><a href="#问题三：const" class="headerlink" title="问题三：const"></a>问题三：const</h1><p><strong>const：</strong>为修饰关键字，在类中主要用于修饰成员变量，和成员函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">calss person&#123;</span><br><span class="line">private：</span><br><span class="line">string name ;</span><br><span class="line">const int sex;</span><br><span class="line">pubic:</span><br><span class="line">person():sex(1)</span><br><span class="line">&#123;</span><br><span class="line">name&#x3D;&quot;rain&quot;;</span><br><span class="line">&#125;</span><br><span class="line">void set()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;sex&#x3D;0;&#x2F;&#x2F;会报错</span><br><span class="line">this-&gt;name&#x3D;&quot;678&quot;;&#x2F;&#x2F;正常编译</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是说 const修饰的变量无法修改。</p>
<p><strong>const 修饰成员函数：</strong><br>相信很多人都见过一些见过一些大佬写代码类似 void getage()const{balabla<del>}<br>Why?<br>那是因为加上const之后会使整个函数无法修改成员变量，防止出现bug。<br>但是又会有人问 为什么会这样呢？？<br>这里就要接一下上面this指针中讲的伏笔，成员函数参数表中会隐藏this指针，类似（person *this，int a），也就是const所要修饰的对象，那么 const person *this 为参数，person对象中的成员变量必定无法修改。<br>也是因为 this指针为默认的存在，所以const的位置 就不受约束，也可以放在函数名之前，类似 void const get(balabala</del>){balabala~~}.起到的作用一样。<br><strong>cosnt修饰对象：</strong><br>cosnt person A;就是这种用法，作用就是定义的A对象只能使用const修饰的成员函数。<br>Why?<br>reason：<br>因为上述A对象进行调用成员函数时，会将cosnt person*A指针传入默认的person <em>this,从而导致安全级数不匹配的现象，产生报错。<br>然而，const修饰的函数默认的this指针参数的类型变成 const person <em>this,安全级数就能达成匹配，从而正确传参。<br>(</em></em>上述内容一定要好好理解**）<br>详情见代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class person &#123;</span><br><span class="line">private:</span><br><span class="line">    int age;</span><br><span class="line">public:</span><br><span class="line">    void show()const &#x2F;&#x2F;常函数 不能修改成员的成员属性</span><br><span class="line">    &#x2F;&#x2F;常函数不能修改类中的成员属性，因为this指针已经变成了 const类型</span><br><span class="line">    &#123;</span><br><span class="line">    &#x2F;&#x2F;    age &#x3D; 123;</span><br><span class="line">        cout &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    void show2()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;nihao&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    const person ps;&#x2F;&#x2F;常量对象,只能调用const函数，普通函数不能用</span><br><span class="line">    &#x2F;&#x2F;ps.show2();&#x2F;&#x2F;相当于类中的默认传参 this指针 传的参数是 const person*</span><br><span class="line">    &#x2F;&#x2F;而普通函数中的this传参  类型仍然是 person *类型 与传参（const person*）安全性不匹配</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="问题四：static"><a href="#问题四：static" class="headerlink" title="问题四：static"></a>问题四：static</h1><p>当一个类中只有一个static int 型成员变量时你猜空间是多少？<br>没错  他和一个空对象一样也只占一个字节（占位字节），那是因为 static存放于全局静态区。并不存放于类的内部。所以在调用static修饰的函数或者变量时，都可以通过 类名::函数名（或者变量名）的方式进行访问，无法通过this指针访问（理所应当，毕竟根本不属于类的空间）。<br>哈哈 这也解释了另外一个现象。<br>为什么static修饰的函数只能修改 static修饰的成员变量，因为本身static修饰的成员就可以直接访问，而且static修饰的成员函数没有类似上述的默认this指针来指向自己。<br>所以只能修改static修饰成员。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class person &#123;</span><br><span class="line">public:</span><br><span class="line">    &#x2F;&#x2F;int num;</span><br><span class="line">    int num;</span><br><span class="line">    static int num2;&#x2F;&#x2F;编译期存在，只有一份，属于类的，所有对象共享</span><br><span class="line">public:</span><br><span class="line">    static void show()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;因为static函数没有this指针</span><br><span class="line">        &#x2F;&#x2F;num &#x3D; 2;&#x2F;&#x2F;在静态函数中只能用static变量，不能使用非static</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int person::num2 &#x3D; 1;&#x2F;&#x2F;一定要在类的外部进行初始化。</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    person A;</span><br><span class="line">    cout &lt;&lt; sizeof(A) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; person::num2 &lt;&lt; endl;</span><br><span class="line">    person::show();&#x2F;&#x2F;可以通过类名直接调用</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>虎子于2020年2月20走丢。<br>英语六级考试在2020年2月21日10分得知考了420分又没过。<br>心情糟糕透了<del>。<br>还好有蘑菇安慰我</del>。<br>thanks.</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习之多态-vfptr指针剖析</title>
    <url>/2020/08/01/c-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%A4%9A%E6%80%81-vfptr%E6%8C%87%E9%92%88%E5%89%96%E6%9E%90/</url>
    <content><![CDATA[<h1 id="多态问题解决"><a href="#多态问题解决" class="headerlink" title="多态问题解决"></a>多态问题解决</h1><p>多态是c++中的重要一部分，他在接口编程，协议制定方面都大有用处。<br>但是 用小白的话说 其实无非就是 利用父类指针变量来调用子类成员函数。<br>实现一个函数有多种形态。<br>ok<br>让我们首先利用仅有的知识解决父类指针调用子类函数<br>函数调用有两种方法，<br>一是指针-&gt;函数名<br>二是函数指针取函数地址进行调用</p>
<h2 id="函数指针复习："><a href="#函数指针复习：" class="headerlink" title="函数指针复习："></a>函数指针复习：</h2><p>首先 定义函数指针有两种方法，</p>
<ol>
<li>直接定义函数指针变量<br>如：void (*ptr)(int);<br>就是定义一个返回值为void参数为一个int的函数指针。</li>
<li>定义一个函数指针的类型 用该类型定义函数指针。<br>如：typedef void(*ptr2)(int) ;<br>ptr2 *ptr;<br>此例中ptr就是与上面例子中的指针相同。<br>！！！<br>当用普通函数指针间接使用类中的函数时，类中的函数必须是静态函数（static关键字）<br>且语法是 函数指针=&amp;类名：：函数名<br>（成员函数指针与其类似）<br>！！！<br>细节见代码：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class person &#123;</span><br><span class="line">public:</span><br><span class="line">    static void show0(int  num)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;你好3&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">void show1(int num3,int num2)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;你好2&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void show2(int num)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;你好1&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">     void (*ptr)(int,int);&#x2F;&#x2F;定义函数指针变量</span><br><span class="line"> typedef void(*ptr2)(int);&#x2F;&#x2F;给一个函数指针的类型取别名</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ptr2 p &#x3D; &amp;show2;&#x2F;&#x2F;注意ptr2是一种类型</span><br><span class="line">    p(1);</span><br><span class="line"></span><br><span class="line">    ptr &#x3D; &amp;show1;&#x2F;&#x2F;而ptr是一种指针</span><br><span class="line">    ptr(1, 2);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;普通函数指针指向类中的函数，那个函数必须是静态函数</span><br><span class="line">    void(*ptr3)(int);</span><br><span class="line">    ptr3 &#x3D; &amp;person::show0;&#x2F;&#x2F; 给函数指针赋别名， &amp;类名：：函数名</span><br><span class="line">    ptr3(1);</span><br><span class="line"></span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：：<br><strong>类中成员函数指针：</strong><br>上面介绍了 的函数指针只能调用类中static修饰的函数，太局限。<br>所以c++大牛们提供了<br>*<em>：：</em>，.<em>,-&gt;**</em> 这三种用法来满足需求。（调用非静态函数，注意的是调用时需要调用对象，或者对象指针）<br>即 语法：返回值（类名：：*指针名）（参数）；<br>如 void(myclass::*ptr)(int );<br>来定义成员函数指针</p>
<p>用<br>person ptemp;<br>    (ptemp.*ptr)(10);<br>来取成员函数地址<br>详情见代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class person &#123;</span><br><span class="line">public:</span><br><span class="line">    void sol(int num)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;&quot;num  &quot;&lt;&lt;num&lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;::*  .*  -&gt;* 是c++提供定义类中成员函数指针的方法</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    void (person::*ptr)(int);&#x2F;&#x2F;定义成员函数指针</span><br><span class="line">    ptr &#x3D; &amp;person::sol;&#x2F;&#x2F;指针指向成员函数</span><br><span class="line">    &#x2F;&#x2F;.*的使用</span><br><span class="line">    person ptemp;</span><br><span class="line">    (ptemp.*ptr)(10);&#x2F;&#x2F;注意 ptemp.*ptr(10)是不合法的，必须加括号</span><br><span class="line">    &#x2F;&#x2F;-&gt;*的使用</span><br><span class="line">    person *ptemp2&#x3D;&amp;ptemp;</span><br><span class="line">    (ptemp2-&gt;sol)(11);</span><br><span class="line">    </span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="解决问题："><a href="#解决问题：" class="headerlink" title="解决问题："></a>解决问题：</h2><p>首先我们尝试利用上述方法：<br>    //方法一：调用函数指针+函数名<br>    fa *pfa = new son;<br>    //fa-&gt;show();<br>    经测验很明显不好使<br>    //方法二：调用父类的成员函数指针来指向子类的函数<br>        void(fa::<em>ptr)();<br>    //ptr = &amp;son::show;<br>    这时候我们发现类型不匹配所以需要强转。<br>    （记住去掉变量名就是变量的类型所以把ptr去掉把剩下的一大堆加上）<br>    ptr = (void (fa::</em>)())&amp;son::show;//测试一下果然可以<br>    （哈哈哈终于解决啦）<br>    见代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class fa &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class son :public fa &#123;</span><br><span class="line">public:</span><br><span class="line">    void show()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;你好&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;方法一：指针加函数名</span><br><span class="line">    fa *pfa &#x3D; new son;</span><br><span class="line">    &#x2F;&#x2F;fa-&gt;show();</span><br><span class="line">    &#x2F;&#x2F;方法二：父类成员函数指针指向子类函数</span><br><span class="line">    void(fa::*ptr)();</span><br><span class="line">    &#x2F;&#x2F;ptr &#x3D; &amp;son::show;类型不匹配所以需要强转。</span><br><span class="line">    ptr &#x3D; (void (fa::*)())&amp;son::show;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是不是太麻烦了？？ 没错就是很麻烦，光是强转类型就是一大串，而且在接口编程方面也不太现实。<br>所以c++大牛们提供了virtual关键字<br>即父类函数拉入虚函数表，子类重写该函数的内容。<br>在执行父类指针是会随着取得对象类型不同，调用的重写的函数也会随之改变。从而实现多态。<br>巴拉巴拉一大堆  不如见代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class water &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void show()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;water::show&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class coffee:public water &#123;</span><br><span class="line">public:</span><br><span class="line">    void show()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;coffee::show&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class coco :public water &#123;</span><br><span class="line">public:</span><br><span class="line">    void show()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;coco::show&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class milk :public water &#123;</span><br><span class="line">public:</span><br><span class="line">    void show()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;milk::show&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">void drink(water *p)</span><br><span class="line">&#123;</span><br><span class="line">    p-&gt;show();</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    water *pw &#x3D; new water;</span><br><span class="line">    milk *pm &#x3D; new milk;</span><br><span class="line">    coco *pcc &#x3D; new coco;</span><br><span class="line">    coffee *pc &#x3D; new coffee;</span><br><span class="line">    drink(pw);</span><br><span class="line">    </span><br><span class="line">    drink(pm);</span><br><span class="line">    drink(pcc);</span><br><span class="line">    drink(pc);</span><br><span class="line"></span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>没错前面那一大堆，都不如一个virtual来的有效。<br>但是函数指针 在其他方面也有更有效地使用。<br>（不过virtual的原理还是vfptr函数指针，只不过c++的大牛们封装好了）</p>
<h1 id="vfptr原理浅谈："><a href="#vfptr原理浅谈：" class="headerlink" title="vfptr原理浅谈："></a>vfptr原理浅谈：</h1><p>首先我们将类的继承分为三部分空间<br>(里面的函数与我后面的代码样例相照应)<br>| 类的结构 |<br>|–|<br>| vfptr指针（首地址前四个字节） |<br>|父类成员(虚函数AA,BB)|<br>| 子类成员(重写的虚函数AA,BB，以及普通函数CC) |<br>而指针指向虚函数表<br>| 虚函数表 |<br>|–|<br>| 虚函数AA |<br>|  虚函数BB|<br>。<br>而当子类继承的时候，子类的空间只会像第一个表一样重复叠加，而一个继承家族中虚函数表只有一份，并不会重复叠加，相当于</p>
<p><strong>-&gt;A父类定义虚函数（加上virtual修饰符）<br>-&gt;虚函数表加上A父类的虚函数<br>-&gt;B子类重写A父类虚函数<br>-&gt;虚函数表加上重写的B虚函数<br>-&gt;孙子C重写A类虚函数<br>-&gt;虚函数表加上重写的C类的虚函数<br>然后….</strong></p>
<p><strong>！！！<br>值得注意的是  如果儿子B右重新声明了一个虚函数<br>仍然是在虚函数表B的那一部分 加上虚函数，不会生成新的虚函数表<br>即 一个家族只有一个虚函数表。</strong><br>所以 代码编译时，一个继承关系的虚函数表只存在一份，而vfptr指针存在于每个声明的对象中（而且是类的前四个字节）。<br>虚函数表既然已经形成，那么父类指针指向的对象调用函数时，如果是虚函数的话会随着vfptr指针指向该对象在虚函数表中对应的函数。从而完成多态。而普通函数不存放于虚函数表，只会调用父类的普通函数。<br>比如：<br>void(fa <em>p)<br>{<br>p-&gt;AA();(就相当于于p-&gt;vfptr[i])//<br>注意这里为了说明运行时大致情况，<br>真正实现的细节过程见下面）<br>}<br>通过vfptr指针来调用函数，从而证明过程：<br><strong>证明过程！！！</strong><br>我们先取对象指针<br> fa \</em>p=new son;<br> 再取指针的前四个字节<br>*(int*)p;<br>由于函数指针无法做偏移调用，所以需要将其进行转成int <em>函数指针<br>（int\</em>)*(int*)p<br>再偏移<br>（int*)*(int*)p+0<br>（int*)*(int*)p+1<br>（int*)*(int*)p+2<br>因为vfptr指针指向函数表，而函数本身就是函数首地址，所以很容易理解vfptr指针是一个二级指针。<br>那么调用时就需要加个*.<br>即<br>*（int*)*(int*)p+0<br>*（int*)*(int*)p+1<br>*（int*)*(int*)p+2<br>然后为了我们能辨别到底是否调用了对应函数中的地址，我们可以使用函数指针定义指针变量(注意还是需要一次强行转换)，再通过vs编译器的下断点调试进行显示。<br>即<br>typedef void（*fun）();<br>fun pfun1=*（int*)*(int*)p+0；<br>~<del>~</del><br>上面是为了帮助理解，实际代码很短：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">&#x2F;&#x2F;什么时候多态？ 通过父类的指针调用实际的子类成员，使父类的指针有多种形态</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;v_table</span><br><span class="line">&#x2F;&#x2F;vfptr指针 记录表的地址 是类中第一个成员 是类创建对象时候存在，每个对象有一份</span><br><span class="line">class fa &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void AA()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;AA&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void BB()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;BB&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void CC()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;CC&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class son:public fa &#123;</span><br><span class="line">public:</span><br><span class="line">     void AA()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;AA_son&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">     void BB()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;BB_son&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">     void CC()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;CC_son&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    fa *temp &#x3D; new fa;</span><br><span class="line">    &#x2F;&#x2F;temp -&gt;AA();</span><br><span class="line">    *temp;&#x2F;&#x2F;为取实际对象</span><br><span class="line">    *(int*)temp;&#x2F;&#x2F;取对象空间的前四个字节</span><br><span class="line">    (int *)*(int*)temp;&#x2F;&#x2F;将vfptr函数指针强转成int*的指针，使指针能够偏移</span><br><span class="line">    typedef void (*pfun)();</span><br><span class="line">    </span><br><span class="line">    pfun fun1&#x3D;(pfun)*((int *)*(int *)temp + 1);</span><br><span class="line">    pfun fun2&#x3D;(pfun)*((int *)*(int *)temp + 2);</span><br><span class="line">    pfun fun3&#x3D;(pfun)*((int *)*(int *)temp + 0);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200227111821168.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200227111836584.PNG" alt="在这里插入图片描述"><br>证明结束<del>~</del>；<br>虽然有点粗糙，但如果能帮到大家理解就很满足了。<br>如果有错误还希望大佬们不吝赐教。<br>多谢！！！</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>c++很深奥，需要细品，细品。</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习之重载操作符以及宏定义补充</title>
    <url>/2020/08/01/c-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%87%8D%E8%BD%BD%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%BB%A5%E5%8F%8A%E5%AE%8F%E5%AE%9A%E4%B9%89%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h1 id="c-重载操作符"><a href="#c-重载操作符" class="headerlink" title="c++重载操作符"></a>c++重载操作符</h1><p>需求分析：<br>由于类似+ -这类的操作符只能满足特定的需求，在实际中无法做到灵活变通。<br>如：A类+B类就无法实现，<br>所以c++大牛们就满足了人们c++重写操作符这一需求<br>方法：<br>重写操作符仅有两种方法<br><strong>一：<br>在类中重写操作符，就比如我上述举的例子A类加B类就可以在A的原定义上重写+号操作符。<br>（是不是感觉方法一就可以满足所有需求了，而且可以达到封装效果其实不然）<br>二：<br>定义全局函数来重载操作符，由于很多情况我们需要用重载c++封装好的操作符<br>如：<br>cout&lt;&lt;A类&lt;&lt;endl;<br>如果按照方法一，我们需要拿到cout所在类的源码进行改写，很明显是不可能的，所以我们需要利用方法二来进行重写。</strong><br>（提醒，一般方法一可以做到的重写操作符方法二也可以做到，方法二可以做到的方法一不一定可以做到。但是实际上常常用的是方法一 是因为方法一可以达到更好的封装效果，而不用方法二）。</p>
<h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>步骤：<br>1.首先我们承认<br> [函数返回值]+ [operator]+[要修改的操作符]+[(参数)]+{函数体}；<br>是成员函数<br>2.这个类本身作为参数左值（通常不写，利用this指针进行操作），其余数作为参数右值<br>3.填充代码<br>例子：<br>我们要重载+运算符，（将两个类中的num成员变量加在一起）<br>1.首先承认<br>返回值 operator+(){}；为成员函数<br>2.<br>假设我们利用类中的整数相加，所以<br>int operator+(B temp){}<br>3.补充<br>int operator+(B temp){<br>return this-&gt;num+temp.num;<br>}<br>OK 完成了。</p>
<h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>其实方法二与方法一大相径庭<br>步骤：<br>1.首先我们承认<br> [函数返回值]+ [operator]+[要修改的操作符]+[(参数)]+{函数体}；<br>是全局函数<br>2.将操作符的操作数作为参数 加上去（与方法一的主要区别）<br>3.填充代码<br>例子：<br>我们要重载-运算符，（将两个类中的num成员变量互减）<br>1.首先承认<br>返回值 operator-(){}；为成员函数<br>2.<br>假设我们利用类中的整数相减，所以<br>int operator-(A temp0,B temp1){}<br>3.补充<br>int operator(A temp0,B temp1){<br>return temp0.num-temp1.num;<br>}<br>OK 完成了。<br><strong>注意！！！</strong><br>肯定会有很多读者会发出这样的疑问？？那么++i和i++的区别呢<br>二者的名字不都是++吗？？？<br>没错  的确如此，这种情况比较特殊为了让编译器区别左++和右++<br>重载右++时需要加上一位占位参数即<br>右++：<br>void operator++（int temp）<br>{<br>temp=this-&gt;num;<br>this-&gt;num++;<br>return temp;<br>};<br>左++：<br>void operator++（）<br>{<br>//temp=this-&gt;num;<br>this-&gt;num++;<br>return this-&gt;num;<br>};</p>
<h1 id="宏定义补充"><a href="#宏定义补充" class="headerlink" title="宏定义补充"></a>宏定义补充</h1><p>由于都是基本用法就不多比比了<br>见代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;!!!注意thisclass是类名，show是其中的函数</span><br><span class="line">&#x2F;&#x2F;单个\代表将两行代码链接</span><br><span class="line">#define AAA()\</span><br><span class="line">for(int i&#x3D;0;i&lt;10;i++)\</span><br><span class="line">&#123;\</span><br><span class="line">cout&lt;&lt;i&lt;&lt;endl;\</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;双##代表二者连接一起</span><br><span class="line">#define BBB(thisclass)\</span><br><span class="line">&#123;\</span><br><span class="line">thisclass Ps##thisclass;\</span><br><span class="line"> Ps##thisclass.show();\</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;单个#相当于 &quot; &quot;</span><br><span class="line">#define CCC(thisclass)\</span><br><span class="line">&#123;\</span><br><span class="line">    cout &lt;&lt; #thisclass &lt;&lt; endl;\</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里值得注意的是 ps##thisclass，在主函数生成的变量名就是ps+thisclass<br>如<br>psmyclass;<br>所谓的宏定义就是一些代码替换，减少码量。小窍门能多记就多记</p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>脑子里很乱，总感觉自己想要的是过度的炫耀，啧啧啧。<br>是有理想还是虚荣心作怪？？<br>是个问题。</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/30/hello-world/</url>
    <content><![CDATA[<h1 id="你好啊-我的第一个github博客"><a href="#你好啊-我的第一个github博客" class="headerlink" title="你好啊 我的第一个github博客"></a>你好啊 我的第一个github博客</h1>]]></content>
  </entry>
  <entry>
    <title>数据结构-单向队列（c语言）</title>
    <url>/2020/08/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E5%90%91%E9%98%9F%E5%88%97%EF%BC%88c%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="单向队列"><a href="#单向队列" class="headerlink" title="单向队列"></a>单向队列</h1><p>额<del>~</del>，相信各位都是巨巨这点内容就不用我介绍啦。<br>今天十月二十四，程序员节快乐。<br>（其实写这篇文章也就是为了刷一个徽章而已，Orz,太卑微啦）</p>
<h2 id="队列代码实现："><a href="#队列代码实现：" class="headerlink" title="队列代码实现："></a>队列代码实现：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define True 1</span><br><span class="line">#define False 0</span><br><span class="line">#define OK 1</span><br><span class="line">#define Error 0</span><br><span class="line">#define Infeasible -1</span><br><span class="line">#define Overflow -2</span><br><span class="line">typedef int Status;</span><br><span class="line">#define STACK_INIT_SIZE 100</span><br><span class="line">#define STACKINCREMENT 2</span><br><span class="line">#define SElemType char</span><br><span class="line">#define QElemType char</span><br><span class="line"> typedef struct QNode</span><br><span class="line"> &#123;</span><br><span class="line">   QElemType data;</span><br><span class="line">   QNode *next;</span><br><span class="line"> &#125;*QueuePtr;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"> struct LinkQueue</span><br><span class="line"> &#123;</span><br><span class="line">   QueuePtr front,rear; &#x2F;&#x2F; 队头、队尾指针</span><br><span class="line"> &#125;;</span><br><span class="line"> &#x2F;&#x2F; bo3-2.cpp 链队列(存储结构由c3-2.h定义)的基本操作(9个)</span><br><span class="line"> Status InitQueue(LinkQueue &amp;Q)</span><br><span class="line"> &#123; &#x2F;&#x2F; 构造一个空队列Q</span><br><span class="line">     QueuePtr q;</span><br><span class="line">     q&#x3D;(QueuePtr)malloc(sizeof (QNode));</span><br><span class="line">     q-&gt;next&#x3D;NULL;</span><br><span class="line">     Q.front&#x3D;q;</span><br><span class="line">     Q.rear&#x3D;q;</span><br><span class="line"> &#125;</span><br><span class="line"> Status DestroyQueue(LinkQueue &amp;Q)</span><br><span class="line"> &#123; &#x2F;&#x2F; 销毁队列Q(无论空否均可)</span><br><span class="line"></span><br><span class="line">while(Q.front)</span><br><span class="line">&#123;</span><br><span class="line">    Q.rear&#x3D;Q.front-&gt;next;</span><br><span class="line">    free(Q.front);</span><br><span class="line">    Q.front&#x3D;Q.rear;</span><br><span class="line">&#125;</span><br><span class="line">Q.front&#x3D;NULL;</span><br><span class="line">Q.rear&#x3D;NULL;</span><br><span class="line">return 1;</span><br><span class="line"> &#125;</span><br><span class="line"> Status ClearQueue(LinkQueue &amp;Q)</span><br><span class="line"> &#123; &#x2F;&#x2F; 将Q清为空队列</span><br><span class="line">  QueuePtr cn;</span><br><span class="line">while(Q.front!&#x3D;Q.rear)</span><br><span class="line">&#123;</span><br><span class="line">    cn&#x3D;Q.front-&gt;next;</span><br><span class="line">    free(Q.front-&gt;next);</span><br><span class="line">    Q.front&#x3D;cn;</span><br><span class="line">&#125;</span><br><span class="line">if(Q.front&#x3D;&#x3D;Q.rear)</span><br><span class="line">return 1;</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> Status QueueEmpty(LinkQueue Q)</span><br><span class="line"> &#123; &#x2F;&#x2F; 若Q为空队列,则返回TRUE,否则返回FALSE</span><br><span class="line"></span><br><span class="line">if(Q.rear&#x3D;&#x3D;Q.front)</span><br><span class="line">    return 1;</span><br><span class="line">else&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> int QueueLength(LinkQueue Q)</span><br><span class="line"> &#123; &#x2F;&#x2F; 求队列的长度</span><br><span class="line">      int cnt&#x3D;0;</span><br><span class="line">      while(Q.front!&#x3D;Q.rear)</span><br><span class="line">      &#123;</span><br><span class="line">          cnt++;</span><br><span class="line">          Q.front&#x3D;Q.front-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">return cnt;</span><br><span class="line"> &#125;</span><br><span class="line"> Status GetHead(LinkQueue Q,QElemType &amp;e)</span><br><span class="line"> &#123; &#x2F;&#x2F; 若队列不空,则用e返回Q的队头元素,并返回OK,否则返回ERROR</span><br><span class="line">   if(Q.front&#x3D;&#x3D;Q.rear)</span><br><span class="line">   &#123;</span><br><span class="line">       return Error;</span><br><span class="line">   &#125;</span><br><span class="line">   e&#x3D;Q.front-&gt;next-&gt;data;</span><br><span class="line">   return 1;</span><br><span class="line"> &#125;</span><br><span class="line"> Status EnQueue(LinkQueue &amp;Q,QElemType e)</span><br><span class="line"> &#123; &#x2F;&#x2F; 插入元素e为Q的新的队尾元素</span><br><span class="line">    QueuePtr temp;</span><br><span class="line">    temp&#x3D;(QueuePtr)malloc(sizeof(QNode) );</span><br><span class="line">    if(!temp)exit(Overflow);&#x2F;&#x2F;&#x2F;分配空间失败</span><br><span class="line">    temp-&gt;next&#x3D;NULL;</span><br><span class="line">    temp-&gt;data&#x3D;e;</span><br><span class="line">    Q.rear-&gt;next&#x3D;temp;</span><br><span class="line">    Q.rear&#x3D;temp;</span><br><span class="line">return 1;</span><br><span class="line"> &#125;</span><br><span class="line"> Status DeQueue(LinkQueue &amp;Q,QElemType &amp;e)</span><br><span class="line"> &#123; &#x2F;&#x2F; 若队列不空,删除Q的队头元素,用e返回其值,并返回OK,否则返回ERROR</span><br><span class="line">   if(Q.front&#x3D;&#x3D;Q.rear)</span><br><span class="line">   &#123;</span><br><span class="line">       return Error;</span><br><span class="line">   &#125;</span><br><span class="line">   QueuePtr temp&#x3D;Q.front-&gt;next;</span><br><span class="line">   e&#x3D;temp-&gt;data;</span><br><span class="line">   Q.front-&gt;next&#x3D;temp-&gt;next;</span><br><span class="line">   if(Q.rear&#x3D;&#x3D;temp)Q.rear&#x3D;Q.front;</span><br><span class="line">   free(temp);</span><br><span class="line">   return 1;</span><br><span class="line"> &#125;</span><br><span class="line"> Status QueueTraverse(LinkQueue Q,void(*vi)(QElemType))</span><br><span class="line"> &#123; &#x2F;&#x2F; 从队头到队尾依次对队列Q中每个元素调用函数vi()。一旦vi失败,则操作失败</span><br><span class="line"></span><br><span class="line">if(Q.front&#x3D;&#x3D;Q.rear)</span><br><span class="line">&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">QueuePtr cn&#x3D;Q.front-&gt;next;</span><br><span class="line">&#x2F;&#x2F;vi(cn-&gt;data);</span><br><span class="line">while(cn)</span><br><span class="line">&#123;</span><br><span class="line">    vi(cn-&gt;data);</span><br><span class="line">    cn&#x3D;cn-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">if(!cn)</span><br><span class="line">&#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> void visit(QElemType i)</span><br><span class="line"> &#123;</span><br><span class="line">   printf(&quot;%c &quot;,i);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> int main()</span><br><span class="line"> &#123;</span><br><span class="line">   int i;</span><br><span class="line">   QElemType d;</span><br><span class="line">   LinkQueue q;</span><br><span class="line">   i&#x3D;InitQueue(q);</span><br><span class="line">   if(i)</span><br><span class="line">     printf(&quot;成功地构造了一个空队列!\n&quot;);</span><br><span class="line">   &#x2F;&#x2F;  printf(&quot;%d&quot;,QueueEmpty(q));</span><br><span class="line">   printf(&quot;是否空队列？%d(1:空 0:否)  \n&quot;,QueueEmpty(q));</span><br><span class="line">   printf(&quot;队列的长度为%d\n&quot;,QueueLength(q));</span><br><span class="line">   EnQueue(q,-5);</span><br><span class="line">   EnQueue(q,5);</span><br><span class="line">   EnQueue(q,10);</span><br><span class="line">   printf(&quot;插入3个元素(-5,5,10)后,队列的长度为%d\n&quot;,QueueLength(q));</span><br><span class="line">   printf(&quot;是否空队列？%d(1:空 0:否)  &quot;,QueueEmpty(q));</span><br><span class="line">   printf(&quot;队列的元素依次为：&quot;);</span><br><span class="line">   QueueTraverse(q,visit);</span><br><span class="line">   i&#x3D;GetHead(q,d);</span><br><span class="line">   if(i&#x3D;&#x3D;OK)</span><br><span class="line">     printf(&quot;队头元素是：%d\n&quot;,d);</span><br><span class="line">   DeQueue(q,d);</span><br><span class="line">   printf(&quot;删除了队头元素%d\n&quot;,d);</span><br><span class="line">   i&#x3D;GetHead(q,d);</span><br><span class="line">   if(i&#x3D;&#x3D;OK)</span><br><span class="line">     printf(&quot;新的队头元素是：%d\n&quot;,d);</span><br><span class="line">   ClearQueue(q);</span><br><span class="line">   printf(&quot;清空队列后,q.front&#x3D;%u q.rear&#x3D;%u q.front-&gt;next&#x3D;%u\n&quot;,q.front,q.rear,q.front-&gt;next);</span><br><span class="line">   DestroyQueue(q);</span><br><span class="line">   printf(&quot;销毁队列后,q.front&#x3D;%u q.rear&#x3D;%u\n&quot;,q.front, q.rear);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>代码很清楚，自我感觉各位可以直接用来交作业（如果不嫌弃的话）。<br>如果有错误，希望各位能不吝赐教哦。</p>
<h2 id="告诫："><a href="#告诫：" class="headerlink" title="告诫："></a>告诫：</h2><p>勿失本心。<br>节日快乐o(∩_∩)o。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-栈（c语言）</title>
    <url>/2020/08/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%EF%BC%88c%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="数据结构-栈"><a href="#数据结构-栈" class="headerlink" title="数据结构-栈"></a>数据结构-栈</h1><p>博主写这篇文章是为了考试打印用，所以具体原理就不详细介绍啦不过代码也很简单。（如果不懂或者错误可以在下面评论） 废话不多说</p>
<h1 id="栈代码："><a href="#栈代码：" class="headerlink" title="栈代码："></a>栈代码：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#define True 1</span><br><span class="line">#define False 0</span><br><span class="line">#define OK 1</span><br><span class="line">#define Error 0</span><br><span class="line">#define Infeasible -1</span><br><span class="line">#define Overflow -2</span><br><span class="line">typedef int Status;</span><br><span class="line">#define STACK_INIT_SIZE 100</span><br><span class="line">#define STACKINCREMENT 2</span><br><span class="line">#define SElemType char</span><br><span class="line">typedef struct&#123;</span><br><span class="line">  SElemType *base;</span><br><span class="line">  SElemType *top;</span><br><span class="line">  int stacksize;</span><br><span class="line">&#125;Sqstack;</span><br><span class="line">Status InitStack(Sqstack &amp;S);</span><br><span class="line">Status DestroyStack(Sqstack &amp;S);</span><br><span class="line">Status ClearStack(Sqstack &amp;S);</span><br><span class="line">Status StackEmpty(Sqstack S);</span><br><span class="line">int StackLength(Sqstack S);</span><br><span class="line">Status GetTop(Sqstack S,SElemType &amp;e);</span><br><span class="line">Status Push(Sqstack &amp;S,SElemType e);</span><br><span class="line">Status Pop(Sqstack &amp;s,SElemType &amp;e);</span><br><span class="line">Status StackTraverse(Sqstack S,Status(* vis)(SElemType));</span><br><span class="line">Status vis(SElemType);</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    char k&#x3D;&#39;1&#39;;</span><br><span class="line">   int j;</span><br><span class="line">   Sqstack s;</span><br><span class="line">   SElemType e;</span><br><span class="line">   if(InitStack(s)&#x3D;&#x3D;OK)</span><br><span class="line">     for(j&#x3D;1;j&lt;&#x3D;12;j++)&#123;</span><br><span class="line">      &#x2F;&#x2F; SElemType tem&#x3D;j+&#39;0&#39;;</span><br><span class="line">      &#x2F;&#x2F; printf(&quot;%c\n&quot;,tem);</span><br><span class="line">       Push(s,j);</span><br><span class="line">     &#125;</span><br><span class="line">   printf(&quot;栈中元素依次为：&quot;);</span><br><span class="line">   StackTraverse(s,vis);</span><br><span class="line">   Pop(s,e);</span><br><span class="line">   printf(&quot;弹出的栈顶元素 e&#x3D;%d\n&quot;,e);</span><br><span class="line">   printf(&quot;栈空否：%d(1:空 0:否)\n&quot;,StackEmpty(s));</span><br><span class="line">   GetTop(s,e);</span><br><span class="line">   printf(&quot;栈顶元素 e&#x3D;%d 栈的长度为%d\n&quot;,e,StackLength(s));</span><br><span class="line">   ClearStack(s);</span><br><span class="line">   printf(&quot;清空栈后，栈空否：%d(1:空 0:否)\n&quot;,StackEmpty(s));</span><br><span class="line">   DestroyStack(s);</span><br><span class="line">   printf(&quot;销毁栈后，s.top&#x3D;%u s.base&#x3D;%u s.stacksize&#x3D;%d\n&quot;,s.top,s.base, s.stacksize);</span><br><span class="line">   while(k!&#x3D;&#39;0&#39;)scanf(&quot;%c&quot;,&amp;k);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status InitStack(Sqstack &amp;S)</span><br><span class="line">&#123;</span><br><span class="line">  S.base &#x3D; (SElemType *)malloc(STACK_INIT_SIZE * sizeof(SElemType));</span><br><span class="line">  if(!S.base) exit(Overflow);</span><br><span class="line">  S.top &#x3D; S.base;</span><br><span class="line">  S.stacksize &#x3D; STACK_INIT_SIZE;</span><br><span class="line">  return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status GetTop(Sqstack S,SElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">  if(S.top &#x3D;&#x3D; S.base) return Error;</span><br><span class="line">  e &#x3D; *(S.top-1);</span><br><span class="line">  return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status Push(Sqstack &amp;S,SElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  if(S.top - S.base &gt;&#x3D; S.stacksize)</span><br><span class="line">  &#123;</span><br><span class="line">    S.base &#x3D; (SElemType *)realloc(S.base , (S.stacksize + STACKINCREMENT) * sizeof(SElemType));</span><br><span class="line">    if(!S.base) exit(Overflow);</span><br><span class="line">    S.top &#x3D; S.base + S.stacksize;</span><br><span class="line">    S.stacksize +&#x3D; STACKINCREMENT;</span><br><span class="line">  &#125;</span><br><span class="line">  *S.top++ &#x3D; e;</span><br><span class="line">  return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status Pop(Sqstack &amp;S,SElemType &amp;e)</span><br><span class="line">&#123;</span><br><span class="line">  if(S.top &#x3D;&#x3D; S.base) return Error;</span><br><span class="line">  e &#x3D; *--S.top;</span><br><span class="line">  return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status StackEmpty(Sqstack S)</span><br><span class="line">&#123;</span><br><span class="line">  return S.top &#x3D;&#x3D; S.base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status StackLength(Sqstack S)</span><br><span class="line">&#123;</span><br><span class="line">  return S.top - S.base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status DestroyStack(Sqstack &amp;S)</span><br><span class="line">&#123;</span><br><span class="line">  if(!S.base) return Error;</span><br><span class="line">  free(S.base);</span><br><span class="line">  S.base &#x3D; NULL;</span><br><span class="line">  S.top &#x3D; NULL;</span><br><span class="line">  S.stacksize &#x3D; 0;</span><br><span class="line">  return OK;</span><br><span class="line">&#125;</span><br><span class="line">Status ClearStack(Sqstack &amp;S)</span><br><span class="line">&#123;</span><br><span class="line">  S.top &#x3D; S.base;</span><br><span class="line">  return OK;</span><br><span class="line">&#125;</span><br><span class="line">Status StackTraverse(Sqstack S,Status(* vis)(SElemType e))</span><br><span class="line">&#123;</span><br><span class="line">  if(!S.base) return Error;</span><br><span class="line">  SElemType *p;</span><br><span class="line">  p &#x3D; S.top;</span><br><span class="line">  for( ; p !&#x3D; S.base ; --p)</span><br><span class="line">  &#123;</span><br><span class="line">    vis(*(p-1));</span><br><span class="line">  &#125;</span><br><span class="line">  printf(&quot;\n&quot;);</span><br><span class="line">  return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status vis(SElemType e)</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;%u &quot;,e);&#x2F;&#x2F;&#x2F;此处若要是需要显示char型，就需要改成%c。</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="程序员节快乐"><a href="#程序员节快乐" class="headerlink" title="程序员节快乐"></a>程序员节快乐</h3>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-链表（c语言）</title>
    <url>/2020/08/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%EF%BC%88c%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="链表："><a href="#链表：" class="headerlink" title="链表："></a>链表：</h1><p>博主为考试方便留的模板，在此就不详细介绍啦（如果有错误，希望不吝赐教）<br>不嫌弃的话也可以留做模板（哈哈哈）</p>
<h2 id="链表代码："><a href="#链表代码：" class="headerlink" title="链表代码："></a>链表代码：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;malloc.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef int ElemType;</span><br><span class="line">typedef struct node</span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    struct node *next;</span><br><span class="line">&#125; node, *linklist;</span><br><span class="line">linklist creat()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    linklist s&#x3D;(linklist)malloc(sizeof (node));</span><br><span class="line">    s-&gt;next&#x3D;NULL;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line">void creatlist(linklist hn,int *data,int datanum)</span><br><span class="line">&#123;</span><br><span class="line">    linklist cn&#x3D;hn;&#x2F;&#x2F;&#x2F;定义一个currentode指针避免头顶指针的地址发生改变。</span><br><span class="line">    for(int i&#x3D;0; i&lt;datanum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cn-&gt;data&#x3D;data[i];</span><br><span class="line">        if(i&lt;datanum-1)&#x2F;&#x2F;&#x2F;避免空间的浪费</span><br><span class="line">        &#123;</span><br><span class="line">            cn-&gt;next&#x3D;(linklist)malloc(sizeof (node));</span><br><span class="line">            cn&#x3D;cn-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cn-&gt;next&#x3D;NULL;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool inser(linklist l,int num,int index)&#x2F;&#x2F;&#x2F;num的数目指的是要插入数据</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;1;</span><br><span class="line">    linklist cn&#x3D;l;&#x2F;&#x2F;&#x2F;定义一个currentode指针避免头顶指针的地址发生改变。</span><br><span class="line">    while(i&lt;index&amp;&amp;cn)&#x2F;&#x2F;&#x2F;找到要插入节点位置的前一个节点</span><br><span class="line">    &#123;</span><br><span class="line">        cn&#x3D;cn-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    linklist node_insert&#x3D;(linklist)malloc(sizeof (node) );</span><br><span class="line">    if(node_insert&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;内存空间不足\n&quot;);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    node_insert-&gt;data&#x3D;num;</span><br><span class="line">    node_insert-&gt;next&#x3D;cn-&gt;next;</span><br><span class="line">    cn-&gt;next&#x3D;node_insert;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">bool getelem(linklist l,int index,int &amp;storage)&#x2F;&#x2F;&#x2F;将链表中对应节点的值存在storage里面</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;1;</span><br><span class="line">    linklist cn&#x3D;l;&#x2F;&#x2F;&#x2F;定义一个currentode指针避免头顶指针的地址发生改变。</span><br><span class="line">    while(cn&amp;&amp;i&lt;index)</span><br><span class="line">    &#123;</span><br><span class="line">        cn&#x3D;cn-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    if(cn&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;can&#39;t find&quot;);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    storage&#x3D;cn-&gt;data;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">void showlist(linklist l)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;int len&#x3D;getlen(l);</span><br><span class="line">    linklist cn&#x3D;l-&gt;next;</span><br><span class="line">    while(cn)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot; %d&quot;,cn-&gt;data);</span><br><span class="line">        cn&#x3D;cn-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int getlen(linklist l)</span><br><span class="line">&#123;</span><br><span class="line">    linklist cn&#x3D;l;&#x2F;&#x2F;&#x2F;定义一个currentode指针避免头顶指针的地址发生改变。</span><br><span class="line">    int cnt&#x3D;0;</span><br><span class="line">    while(cn)</span><br><span class="line">    &#123;</span><br><span class="line">        cn&#x3D;cn-&gt;next;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    return --cnt;</span><br><span class="line">&#125;</span><br><span class="line">void delet(linklist l,int index)</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;1;</span><br><span class="line">    linklist cn&#x3D;l,temp;</span><br><span class="line">    while(cn&amp;&amp;i&lt;index)</span><br><span class="line">    &#123;</span><br><span class="line">        cn&#x3D;cn-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">        &#x2F;&#x2F; cout&lt;&lt;&quot;666&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    if(cn&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;NO such data\n&quot;);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    temp&#x3D;cn-&gt;next;</span><br><span class="line">    cn-&gt;next&#x3D;cn-&gt;next-&gt;next;</span><br><span class="line">    free(temp);</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br><span class="line">void destory(linklist l)</span><br><span class="line">&#123;</span><br><span class="line">    linklist cn&#x3D;l;</span><br><span class="line">    int len&#x3D;getlen(l);</span><br><span class="line">    for(int i&#x3D;1; i&lt;&#x3D;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;cout&lt;&lt;&quot;987&quot;&lt;&lt;endl;</span><br><span class="line">        delet(l,1);</span><br><span class="line">        &#x2F;&#x2F; cout&lt;&lt;&quot;852&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;链表长为%d&quot;,getlen(l));</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    linklist head&#x3D;creat();</span><br><span class="line">    int data[5]&#x3D; &#123;0,1,2,4,3&#125;; &#x2F;&#x2F;&#x2F;下标为零的点为空值</span><br><span class="line">    creatlist(head,data,5);</span><br><span class="line">    showlist(head);</span><br><span class="line">    printf(&quot;链表长为：%d\n&quot;,getlen(head));</span><br><span class="line">    if(inser(head,6,2))</span><br><span class="line">    &#123;</span><br><span class="line">        showlist(head);</span><br><span class="line">    &#125;</span><br><span class="line">    delet(head,5);</span><br><span class="line"></span><br><span class="line">    showlist(head);</span><br><span class="line">    destory(head);</span><br><span class="line">    showlist(head);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="节日快乐"><a href="#节日快乐" class="headerlink" title="节日快乐"></a>节日快乐</h3>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux_day4</title>
    <url>/2020/08/01/Linux-day4/</url>
    <content><![CDATA[<h1 id="Linux-信号（信号初步以及捕捉-超详解）"><a href="#Linux-信号（信号初步以及捕捉-超详解）" class="headerlink" title="Linux-信号（信号初步以及捕捉-超详解）"></a>Linux-信号（信号初步以及捕捉-超详解）</h1><h1 id="1-信号的概念："><a href="#1-信号的概念：" class="headerlink" title="1.信号的概念："></a>1.信号的概念：</h1><p>信号的特点：<br>                    1简单。2 不能携带大量数据。3满足某种特殊条件才发送。<br>信号的特质：<br>                    信号是通过软件方法实现的，其实现手段导致信号有很强的延时性，但对于用户来说，这个延时很短并不会被察觉。<br>            <strong>注：每个进程的所有信号，都是由内核发送内核处理。</strong></p>
<h2 id="能够产生信号的事件："><a href="#能够产生信号的事件：" class="headerlink" title="能够产生信号的事件："></a>能够产生信号的事件：</h2><pre><code>            一.按键产生。比如我们经常使用的 ctrl+c都是产生一个信号
            二.系统调用产生。比如 kill （函数）
            三.软件条件产生。比如定时器 alarm
            四.硬件产生的异常。比如非法访问内存（段错误）
            五.命令产生 ，比如：kill命令</code></pre>
<h2 id="专业术语："><a href="#专业术语：" class="headerlink" title="专业术语："></a>专业术语：</h2><p><strong>递达</strong>：信号产生并且到达；（就是说信号产生并且被成功接收  ）<br><strong>未决</strong>：产生和递达之间的状态，主要用于阻塞（屏蔽）导致该状态<br><strong>未决信号集</strong>:就像他的名字一样，这是一个集合，无许且不重复。它存在于进程的pcb中，一个进程的未决信号集是一个类似清空的数组（也就是这个数组全为零）。而且这个数组只有8个字节也就是64位（由于信号的种类只有64种，每种信号对应一个0），当产生信号的时候，pcb会将该信号对应下标的0变为1，说明该信号产生需要被处理。然后如果<strong>该信号未被阻塞的情况下</strong>，内核会立即对信号作出处理，然后再将信号对应的1变为0。<br>就像前面说的这是该信号没有被阻塞的情况下，那么阻塞的情况下呢？这时候我们就需要引出另外的一个专业术语—–&gt;<strong>信号阻塞集</strong>（也叫<strong>信号屏蔽字</strong>）<br><strong>信号阻塞集</strong>：他跟信号未决信号集一样也是一个集合而且也是类似一个64位的数组，存放于pcb中，最开始全为零也就是不对任何信号屏蔽。对于它的作用就是阻值某些信号在未决信号集中从1变成0的过程。而判断阻止哪一种信号的依据就是对应信号阻塞集的0变为1.<br>  总的来说就是，<strong>信号阻塞集影响未决信号集。</strong></p>
<h2 id="信号的处理方式："><a href="#信号的处理方式：" class="headerlink" title="信号的处理方式："></a>信号的处理方式：</h2><pre><code>                        1.默认处理动作（由内核设定好的）。
                         2.忽略（丢弃）注意：这是处理的方式为忽略 而不是不处理（注意理解问题）。
                         3.捕捉（调用信号的处理方式）。
                         注意一般信号都有三种处理方式可以根据目的做出改变。但是唯独9号信号（SIGKILL）和19号信号（SIGSTOP）只能执行默认处理动作,甚至不能将其设置为阻塞。（毕竟这两个是用来关闭进程的，如果这两个信号都被修改，比如修改为忽略处理，那么内核不就失去管理进程的能力了，也挺容易理解的）</code></pre>
<h2 id="信号的四要素"><a href="#信号的四要素" class="headerlink" title="信号的四要素"></a>信号的四要素</h2><p><strong><em>1.信号的编号<br>2.信号的名称<br>3.事件<br>4.默认处理动作</em></strong><br>前三个要素都好理解，这里介绍一下Linux包含的默认处理动作：<br>Term: 终止进程<br>Ign：忽略信号（这里指的是对信号的处理方式为忽略）<br>Core:终止进程，生成一个Core文件。（主要用于gdb调试）<br>Stop:停止进程<br>Cont:让停止进程继续执行。<br><strong>注意 上面五种处理方式相当于处理方式1（默认处理）的子集而不是与处理方式并列。</strong></p>
<h2 id="产生信号："><a href="#产生信号：" class="headerlink" title="产生信号："></a>产生信号：</h2><h3 id="kill函数："><a href="#kill函数：" class="headerlink" title="kill函数："></a>kill函数：</h3><p><img src="https://img-blog.csdnimg.cn/2020051021491628.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>第一个参数为对应收信号的进程的进程号，第二个参数为信号的编号<br>（注意一下，第二个参数最好使用宏名而不是使用编号，这有利于跨平台并且可读性增强）<br>第一个参数：<br>当pid&gt;0时，表示将信号发送给pid对应进程号的进程<br>    pid=0时，表示将信号发送给和调用kill函数的进程属于同一进程组（下面有解释）的所有进程。<br>    pid&lt;0时，表示将信号发送给-pid对应的进程组。<br>    pid=-1时，表示发送给进程有权限发送的所有系统中所有的进程<br>（进程组：每个进程都属于一个进程组，进程组是一个或者多个进程集合，他们互相关联，共同实现一个实体任务，每个进程组都有一个组长，默认的组ID和进程组长相同）<br><strong>raise函数</strong>：只有一个参数就是信号的编号，因为他的功能就是给自己发信号，所以不需要传入特定的进程号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">raise(sig)&#x3D;kill(getpid(),sig);</span><br></pre></td></tr></table></figure>
<p><strong>abort函数</strong>：给自己发送异常终止信号,也就是六号信号SIGABRT,并产生Core文件。没有参数没有返回值。</p>
<h3 id="软件条件产生信号："><a href="#软件条件产生信号：" class="headerlink" title="软件条件产生信号："></a>软件条件产生信号：</h3><p>alarm函数<br>            设置定时器，在指定时间(second)后,内核将给当前进程发送一个 14）SIGALRM信号，进程接收到这信号，默认动作终止。<br>            （注意：每个进程只有一个唯一的定时器）<br>            函数返回值：返回0或者上一次定闹钟还差的时间（就比如你先alarm(5),然后再两秒之后你瞬间int ret =alarm(3);ret=3,就是你定时的时间减去已经执行的两秒）<br>            由于alarm的参数设定的闹钟时间，所以经常使用alarm(0)来结束闹钟。</p>
<h3 id="setitimer函数："><a href="#setitimer函数：" class="headerlink" title="setitimer函数："></a>setitimer函数：</h3><p>先看man文档：<br><img src="https://img-blog.csdnimg.cn/20200511191714862.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>    首先setitimer其实就是对alarm的增强版，也是用到进程中惟一的定时器。<br>        首先第一个参数：<br>        是三个宏用来指定运行方式<br>        ① 自然定时：ITIMER_REAL → 14）SIGLARM                         计算自然时间<br>        ② 虚拟空间计时(用户空间)：ITIMER_VIRTUAL → 26）SIGVTALRM       只计算进程占用cpu的时间<br>        ③ 运行时计时(用户+内核)：ITIMER_PROF → 27）SIGPROF         计算占用cpu及执行系统调用的时间<br>        （重点掌握第一种即可）<br>        第二个参数是一个结构体，根据const修饰以及是个指针就很容易猜到这是一个传入参数，是微秒级的<br>        <img src="https://img-blog.csdnimg.cn/20200511192731681.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这个结构体的两个参数还是结构体，这两个结构体分别表示下一次等待的时间和这一次等待的时间。如果仅用来实现类似alarm的功能就可以直接将第一个参数赋值为零<br>至于对应的结构体，也就是下面列出来的类型，struct timeval,第一个参数表示秒级第二个参数表示微秒级<br>        第三个参数就是alarm的返回值，是一个传出参数。不过对应的灵敏度也比alarm更灵活<br>    以下是一个用setitimer实现alarm的代码（可以参考使用）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 #include&lt;stdio.h&gt;</span><br><span class="line">  2 #include&lt;iostream&gt;</span><br><span class="line">  3 #include&lt;unistd.h&gt;</span><br><span class="line">  4 #include&lt;sys&#x2F;time.h&gt;</span><br><span class="line">  5 using namespace std;</span><br><span class="line">  6 itimerval it,oldit;</span><br><span class="line">  7 int my_alarm(int num)&#123;</span><br><span class="line">  8         it.it_value.tv_sec&#x3D;num;</span><br><span class="line">  9         it.it_value.tv_usec&#x3D;0;</span><br><span class="line"> 10         it.it_interval.tv_sec&#x3D;0;</span><br><span class="line"> 11         it.it_interval.tv_usec&#x3D;0;</span><br><span class="line"> 12         setitimer(ITIMER_REAL,&amp;it,&amp;oldit);</span><br><span class="line"> 13         return oldit.it_value.tv_sec;</span><br><span class="line"> 14 &#125;</span><br><span class="line"> 15 int main()&#123;</span><br><span class="line"> 16 </span><br><span class="line"> 17         int temp,i&#x3D;0;</span><br><span class="line"> 18         scanf(&quot;%d&quot;,&amp;temp);</span><br><span class="line"> 19         printf(&quot;start\n&quot;);</span><br><span class="line"> 20         int ans&#x3D;my_alarm(temp);</span><br><span class="line"> 21         while(1)&#123;</span><br><span class="line"> 22         printf(&quot;%d\n&quot;,i++);</span><br><span class="line"> 23         &#125;</span><br><span class="line"> 24 </span><br><span class="line"> 25 </span><br><span class="line"> 26         return 0;</span><br><span class="line"> 27 &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="信号集处理："><a href="#信号集处理：" class="headerlink" title="信号集处理："></a>信号集处理：</h2><p>如何设置一个信号集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sigset_t set;&#x2F;&#x2F;定义集合</span><br><span class="line">int sigemptyset(sigsset_t *set)&#x2F;&#x2F;将某个信号集清零</span><br><span class="line">int sigfillset(sigset_t *set)&#x2F;&#x2F;将某个信号集置为1</span><br><span class="line">int sigaddset(sigset_t *set, int signum);&#x2F;&#x2F;将某个信号集加入信号集</span><br><span class="line">int sigdelset(sigset_t *set, int signum);&#x2F;&#x2F;将某个信号从信号集删除</span><br><span class="line">&#x2F;&#x2F;以上函数都是 成功返回0 失败返回 -1</span><br><span class="line">int sigismember(const sigset_t *set,int signum)&#x2F;&#x2F;判断是否在信号集合中，在集合返回1，不在返回0，失败返回-1</span><br></pre></td></tr></table></figure>
<p>首先我们的为什么要设定信号集？<br>是因为我们想对上面讲过的信号屏蔽字进行操作（信号屏蔽字的功能就是影响未决信号集）。来达成我们相应的目的。<br>那很明显，我们下一步的目的就是如何将信号屏蔽字设置为我们的信号集合。<br>这时候就需要用到另一个函数：sigprocmask函数<br>     int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);<br>这时候我们应该清楚，我们的信号集合其实就是一种位图，我们对其进行的操作类似于与或运算，对原有的信号屏蔽字进行操作。但如果我们再深入考虑一步的话其实也就是，对信号进行阻塞和撤销阻塞两种操作。对，参数一的功能就是实现这一目的（不过这里提供了第三种就是将原来的信号屏蔽字直接替换为当前传入的信号集合，简单粗暴，爱了爱了~~）。<br>    how参数取值：    假设当前的信号屏蔽字为mask<br>1.SIG_BLOCK: 当how设置为此值，set表示需要屏蔽的信号。相当于 mask = mask|set<br>2.SIG_UNBLOCK: 当how设置为此，set表示需要解除屏蔽的信号。相当于 mask = mask &amp; ~set<br>3.SIG_SETMASK: 当how设置为此，set表示用于替代原始屏蔽及的新屏蔽集。相当于 mask = set若，调用sigprocmask解除了对当前若干个信号的阻塞，则在sigprocmask返回前，至少将其中一个信号递达。<br>第二个参数就是一个传入参数，将我们设定的信号集合传入。<br>第三个参数是一个传出参数，就是将原来的信号屏蔽字导出（如果单纯只想查看一下当前的信号屏蔽字可以利用sigpending(sigset_t *set);，set就是一个传出参数，将原来的信号屏蔽字导出。）<br>这里给出一个打印信号屏蔽子的代码可以参考一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1#include&lt;iostream&gt;</span><br><span class="line">  2 #include&lt;stdio.h&gt;</span><br><span class="line">  3 #include&lt;stdlib.h&gt;</span><br><span class="line">  4 #include&lt;signal.h&gt;</span><br><span class="line">  5 #include&lt;unistd.h&gt;</span><br><span class="line">  6 using namespace std;</span><br><span class="line">  7 void sig_show(sigset_t* pset)</span><br><span class="line">  8 &#123;</span><br><span class="line">  9         for(int i&#x3D;0;i&lt;32;i++)</span><br><span class="line"> 10         &#123;</span><br><span class="line"> 11                 if(sigismember(pset,i)&#x3D;&#x3D;1)</span><br><span class="line"> 12                 &#123;</span><br><span class="line"> 13                         printf(&quot;1&quot;);</span><br><span class="line"> 14                 &#125;</span><br><span class="line"> 15                 else&#123;</span><br><span class="line"> 16                         cout&lt;&lt;&quot;0&quot;;</span><br><span class="line"> 17                 &#125;</span><br><span class="line"> 18         &#125;</span><br><span class="line"> 19 </span><br><span class="line"> 20                 cout&lt;&lt;endl;</span><br><span class="line"> 21 &#125;</span><br><span class="line"> 22 int main()</span><br><span class="line"> 23 &#123;</span><br><span class="line"> 24 </span><br><span class="line"> 25         sigset_t set,oldset;</span><br><span class="line"> 26 </span><br><span class="line"> 27         sigemptyset(&amp;set);</span><br><span class="line"> 28         sigemptyset(&amp;oldset);</span><br><span class="line">sigaddset(&amp;set,SIGQUIT);&#x2F;&#x2F;将三号信号屏蔽，可以用ctrl+&#x2F;触发</span><br><span class="line"> 31 </span><br><span class="line"> 32         sigprocmask(SIG_BLOCK,&amp;set,&amp;oldset);</span><br><span class="line"> 33 </span><br><span class="line"> 34         while(1)</span><br><span class="line"> 35         &#123;</span><br><span class="line"> 36                 sigpending(&amp;set);</span><br><span class="line"> 37                 sig_show(&amp;set);</span><br><span class="line"> 38                 sleep(1);</span><br><span class="line"> 39         &#125;</span><br><span class="line"> 40 </span><br><span class="line"> 41         return 0;</span><br><span class="line"> 42 &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200511211932961.png#pic_center" alt="在这里插入图片描述"><br>可见当我用ctrl+\产生信号后，信号屏蔽字就发生改变。</p>
<h2 id="信号捕捉函数的注册："><a href="#信号捕捉函数的注册：" class="headerlink" title="信号捕捉函数的注册："></a>信号捕捉函数的注册：</h2><p>signal函数<br>                        <img src="https://img-blog.csdnimg.cn/20200511200535807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这个函数有两个参数，第一个参数为信号的类型，第二个参数为自己写的处理函数（非常容易使用，所以不再赘述）。</p>
<p>sigaction函数 首先看一下man<br><img src="https://img-blog.csdnimg.cn/20200512220849622.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>首先 第一个参数是一个信号的编号，也就是我们想要捕捉的信号，<br>    第二个参数，我们从const 修饰词以及 指针，就很容易判别这是一传入参数。<br>    至于第三个参数，也很容易看出这是一个传出参数用来保留原来的处理方式。<br>        我们了解完功能之后，来深剖一下结构体的各个参数：<br>         struct sigaction {<br>        void     (*sa_handler)(int);<br>        void     (<em>sa_sigaction)(int, siginfo_t <em>, void *);<br>        sigset_t   sa_mask;<br>        int       sa_flags;<br>        void     (*sa_restorer)(void);<br>    };<br>    （值得注意的是，这个结构体的名字和函数的名字一样，所以你需要定义类型的时候加上struct，用来区别，否则会报错）<br>    第一个 sa_handler 很熟悉吧，没错这是一个以int类型为参数的函数指针，也就是我们的注册捕捉函数。当你想把该信号的处理方式设为忽略处理，你可以直接将SIG_IGN直接挂上去表示执行忽略，或者SIG_DEF表示执行默认动作。（</em></em>重点<strong>）<br>    第二个参数 当sa_flags被指定为SA_SIGINFO标志时，使用该信号处理程序。(很少使用)<br>    第三个参数： 调用信号处理函数时，所要屏蔽的信号集合(信号屏蔽字)。<br>    （注意这里这个时表示暂时屏蔽。举个例子：就是假如你的处理函数很慢需要执行很长时间，那么在处理的过程中，你不希望被其他的信号打扰，你就可以将不想打扰的信号设置为1，然后函数在执行的时候就可以把这些信号屏蔽，当函数结束的时候才可以处理这些信号）（</strong>重点<strong>）（如果不理解可以看一下，下面的参考代码）<br>    第四个参数：通常直接设置为零，表示默认属性。（当你执行注册函数的时候假如你捕捉的信号再次到来也不会处理）（</strong>重点**）<br>    第五个参数：该元素是过时的，不应该使用，POSIX.1标准将不指定该元素。(弃用)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1 #include&lt;iostream&gt;</span><br><span class="line">  2 #include&lt;stdio.h&gt;</span><br><span class="line">  3 #include&lt;unistd.h&gt;</span><br><span class="line">  4 #include&lt;signal.h&gt;</span><br><span class="line">  5 using namespace std;</span><br><span class="line">  6 void sol(int sig)</span><br><span class="line">  7 &#123;</span><br><span class="line">  8 printf(&quot;catch\n&quot;);</span><br><span class="line">  9 sleep(5);&#x2F;&#x2F;睡五秒来体现sa_mask的作用</span><br><span class="line"> 10 &#125;</span><br><span class="line"> 11 int main()</span><br><span class="line"> 12 &#123; struct sigaction sig,oldsig;</span><br><span class="line"> 13         sigset_t temp;</span><br><span class="line"> 14 </span><br><span class="line"> 15 </span><br><span class="line"> 16         sigaddset(&amp;temp,SIGINT);&#x2F;&#x2F;在执行的时候将SIGINT屏蔽掉</span><br><span class="line"> 17         sig.sa_mask&#x3D;temp;</span><br><span class="line"> 18         sig.sa_handler&#x3D;sol;</span><br><span class="line"> 19         sig.sa_flags&#x3D;0;</span><br><span class="line"> 20         sigaction(SIGQUIT,&amp;sig,&amp;oldsig);</span><br><span class="line"> 21         while(1);</span><br><span class="line"> 22 return 0;</span><br><span class="line"> 23 &#125;</span><br><span class="line">~          </span><br></pre></td></tr></table></figure>
<p>执行结果：<br><img src="https://img-blog.csdnimg.cn/2020051222301072.PNG#pic_center" alt="在这里插入图片描述"><br>这里解释一下为何这样测试以及为啥会有这样的结果：<br>首先：我们的捕捉函数是捕捉了SIGQUIT信号可以由 Ctrl+\触发，并且注册的函数为捕捉到就打印catch，sa_mask是屏蔽了可以由Ctrl+c触发的SIGINT信号。<br>1.我输入Ctrl+,产生了SIGQUIT信号打印了catch这个字符串。<br>2.我再次输入Ctrl+,再次产生了SIGQUIT信号，但是由于我们采用默认属性所以，Ctrl+\会被屏蔽，不会再执行注册函数。所以没有反应。<br>3.我又输入Ctrl+c由于，注册函数仍然在执行，而且SIGINT被放在sa_mask里面，所以程序不会对SIGINT做出反应。<br>4.我第二次输入Ctrl+c时，注册函数已经结束，所以程序响应信号。程序结束。（如果还没理解请在评论区留言）</p>
<p>这里总结一下信号捕捉的特性：<br>1.进程正常运行时，默认PCB中有一个信号屏蔽字，假定为☆，它决定了进程自动屏蔽哪些信号。当注册了某个信号捕捉函数，捕捉到该信号以后，要调用该函数。而该函数有可能执行很长时间，在这期间所屏蔽的信号不由☆来指定。而是用sa_mask来指定。调用完信号处理函数，再恢复为☆。<br>2.XXX信号捕捉函数执行期间，XXX信号自动被屏蔽。<br>3.阻塞的常规信号不支持排队，产生多次只记录一次。（后32个实时信号支持排队）</p>
<h3 id="信号一览表"><a href="#信号一览表" class="headerlink" title="信号一览表"></a>信号一览表</h3><pre><code>1) SIGHUP: 当用户退出shell时，由该shell启动的所有进程将收到这个信号，默认动作为终止进程</code></pre>
<ol start="2">
<li>SIGINT：当用户按下了&lt;Ctrl+C&gt;组合键时，用户终端向正在运行中的由该终端启动的程序发出此信号。默认动<br>作为终止进程。</li>
<li>SIGQUIT：当用户按下&lt;ctrl+&gt;组合键时产生该信号，用户终端向正在运行中的由该终端启动的程序发出些信<br>号。默认动作为终止进程。</li>
<li>SIGILL：CPU检测到某进程执行了非法指令。默认动作为终止进程并产生core文件</li>
<li>SIGTRAP：该信号由断点指令或其他 trap指令产生。默认动作为终止里程 并产生core文件。</li>
<li>SIGABRT: 调用abort函数时产生该信号。默认动作为终止进程并产生core文件。</li>
<li>SIGBUS：非法访问内存地址，包括内存对齐出错，默认动作为终止进程并产生core文件。</li>
<li>SIGFPE：在发生致命的运算错误时发出。不仅包括浮点运算错误，还包括溢出及除数为0等所有的算法错误。默认动作为终止进程并产生core文件。</li>
<li>SIGKILL：无条件终止进程。本信号不能被忽略，处理和阻塞。默认动作为终止进程。它向系统管理员提供了可以杀死任何进程的方法。</li>
<li>SIGUSE1：用户定义 的信号。即程序员可以在程序中定义并使用该信号。默认动作为终止进程。</li>
<li>SIGSEGV：指示进程进行了无效内存访问。默认动作为终止进程并产生core文件。</li>
<li>SIGUSR2：另外一个用户自定义信号，程序员可以在程序中定义并使用该信号。默认动作为终止进程。</li>
<li>SIGPIPE：Broken pipe向一个没有读端的管道写数据。默认动作为终止进程。</li>
<li>SIGALRM: 定时器超时，超时的时间 由系统调用alarm设置。默认动作为终止进程。</li>
<li>SIGTERM：程序结束信号，与SIGKILL不同的是，该信号可以被阻塞和终止。通常用来要示程序正常退出。执行shell命令Kill时，缺省产生这个信号。默认动作为终止进程。</li>
<li>SIGSTKFLT：Linux早期版本出现的信号，现仍保留向后兼容。默认动作为终止进程。</li>
<li>SIGCHLD：子进程结束时，父进程会收到这个信号。默认动作为忽略这个信号。</li>
<li>SIGCONT：如果进程已停止，则使其继续运行。默认动作为继续/忽略。</li>
<li>SIGSTOP：停止进程的执行。信号不能被忽略，处理和阻塞。默认动作为暂停进程。</li>
<li>SIGTSTP：停止终端交互进程的运行。按下&lt;ctrl+z&gt;组合键时发出这个信号。默认动作为暂停进程。</li>
<li>SIGTTIN：后台进程读终端控制台。默认动作为暂停进程。</li>
<li>SIGTTOU: 该信号类似于SIGTTIN，在后台进程要向终端输出数据时发生。默认动作为暂停进程。</li>
<li>SIGURG：套接字上有紧急数据时，向当前正在运行的进程发出些信号，报告有紧急数据到达。如网络带外数据到达，默认动作为忽略该信号。</li>
<li>SIGXCPU：进程执行时间超过了分配给该进程的CPU时间 ，系统产生该信号并发送给该进程。默认动作为终止进程。</li>
<li>SIGXFSZ：超过文件的最大长度设置。默认动作为终止进程。</li>
<li>SIGVTALRM：虚拟时钟超时时产生该信号。类似于SIGALRM，但是该信号只计算该进程占用CPU的使用时间。默认动作为终止进程。</li>
<li>SGIPROF：类似于SIGVTALRM，它不公包括该进程占用CPU时间还包括执行系统调用时间。默认动作为终止进程。</li>
<li>SIGWINCH：窗口变化大小时发出。默认动作为忽略该信号。</li>
<li>SIGIO：此信号向进程指示发出了一个异步IO事件。默认动作为忽略。</li>
<li>SIGPWR：关机。默认动作为终止进程。</li>
<li>SIGSYS：无效的系统调用。默认动作为终止进程并产生core文件。</li>
<li>SIGRTMIN ～ (64) SIGRTMAX：LINUX的实时信号，它们没有固定的含义（可以由用户自定义）。所有的实时信号的默认动作都为终止进程。<h4 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h4>运行程序的瓶颈在于IO，优化程序的效率优先考虑IO，比如你可以将输出重定向到一个文件，你会发现CPU的效率会很高。<br>time +./a.out 会统计real：程序实际运行的时间，user: 程序运行在用户空间的时间，sys:程序运行在系统的时间。real=user+sys+等待时间。</li>
</ol>
<h1 id="告诫："><a href="#告诫：" class="headerlink" title="告诫："></a>告诫：</h1><p>做个好人，没毛病！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年全国大学生电子设计大赛F题</title>
    <url>/2020/07/31/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><p>一，任务<br>设计 并制作纸张 计数 显示装置 ，其 组成如图 1所示 。两块 平行 极板 （极板 A、 极板 B）分别通过 导线 a和导线 b连接到测量显示电路， 装置 可测量并显示 置于 极板 A与极板 B之间的纸张数量。<br><img src="https://img-blog.csdnimg.cn/20190813155739940.PNG" alt="理想实物图"><br>二，要求<br>1，基本要求<br>（1）极板 A和极板 和极板 B上的金 属电极 部分均 为边长 50mm0mm ±1 mm 的正方形， 导线 a和导线 b长度均为 500mm ±5mm 。测量显示电路应具有“自校 。测量显示电路应具有“自校 。测量显示电路应具有“自校 。测量显示电路应具有“自校 准”功能， 即正式测试前，对置于两极板间不同张数的纸进行量，以获取测量校准信息。<br>（2）测量显示电路可自检并报告极板A和极板B电极之间是否短路。<br>（3）测量 置于两 极板之间 1~ 10 张不等的 给定 纸张数。每次在极板间放 入 被测纸张 并固定 后，一键启动测量显示被纸张数 后，一键启动测量显示被纸张数 后，一键启动测量显示被纸张数 并发出一声蜂鸣。 每次测量 从按下 同一 测量启动键到发出蜂鸣的 时间 不得超过 5秒钟 ， 在此 期间对 测量装置 不得有任何人工干预 。<br>2.发挥部分<br>（1） 极板、导线 均不变， 测量 置于 两极板之间 15 ~30张不等的 给定 纸张 数。 对测量启动键、显示蜂鸣 测量启动键、显示蜂鸣 测量启动键、显示蜂鸣 、测量 时间 、不得人工干预 、不得人工干预 、不得人工干预 等有关要求同“基 要求同“基 要求同“基 本要求 (3) ”。<br>（2） 极板 、导线 均不变 ，测量 置于两 极板之间 30 张以上 的给定 纸张 数。 对测量启动键、显示蜂鸣 测量启动键、显示蜂鸣 测量启动键、显示蜂鸣 、测量 时间、不得人工干预等有关 时间、不得人工干预等有关 时间、不得人工干预等有关 要求同“基 要求同“基 要求同“基 本要求 (3) ”。<br>（3） 其他。<br> 三、说明<br>（1） 被测纸张一律为 70g 规格的 规格的 A4 复印纸， 极板 A、B电极 接触 被测纸 张的具体位置不限。测试 时使用 测试 现场提供 的同规格纸张 。<br>（2） 极板 A、B可用金属板材 可用金属板材 制作 ，也 可用 双面覆铜板（简称） 双面覆铜板（简称） 制 作。双面板的一 。双面板的一 面加工 出边长 50mm ±1mm 的正方形 覆铜电 极板，另 一面 允许 有用于焊接导线 a、b的过孔 焊盘 与引线、 不允许有覆铜面 网。禁止用多层板 制作极。<br>（3） 极板 A、B与导线 a、b（信号线） 必须 为二线制平行极板结构 二线制平行极板结构 ，每块 ，每块 极板 的电极 只能连接一根信号线； 导线 a、b的线缆类型与排布方式 不限。极板 、导线不 符合上述 要求 的不予测试 。<br>（4） 参赛者自行设计极板与纸张之间的 结构， 使两极板 能压紧或夹被测 纸张， 该结构不得增加 电极板 面积 ；极板 A、B与导线 a、b部分 不得 安装 或连接 元器件 、其他 传感器 或量器 ，否则 不予测试 。<br>（5） “自 校准”应在测试前 校准”应在测试前 的作品恢复准备阶段完成， 开始 测试 后不 得再 进行“自校准” 操作。<br>（6） 每次 开始 测量 只能按同一个启动键（只能按一次）， 完成 测量 时发出 蜂鸣音 并显示 锁定 的被测纸张数，无法锁定 显示 纸张数 的不得分 。</p>
<p><img src="https://img-blog.csdnimg.cn/20190813160554454.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTMyMjc0MA==,size_16,color_FFFFFF,t_70" alt="评分表"></p>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>利用fdc1214模块将两极板之间的电容大小转换为数字信号返回到单片机，通过多次测试总结数据，<br>数据处理可以用三种方法进行：<br>（1）：<br>打表，将数据区间不断的精确，从而确定固定纸张对应数值，从而得之数目，然后将数字映射到LDC模块进行显示<br>（2）：<br>利用EXCEL表格进行函数模拟，得出具体的函数（但是解函数比较麻烦，好像涉及到五阶函数求解模拟）<br>（3）：利用matlab（数学建模的巨巨应该会很熟悉）进行模拟函数，因为本人太过于菜，不得不用打表处理数据。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>
#include &lt;Wire.h&gt;
#include &lt;LCD.h&gt;
LCD lcd(33, 31, 29);//LCD，CS，DAT，CLK
struct node&#123;
  int l;
  int r;
&#125;;
node arr[31]=&#123;&#123;13960,14399&#125;,&#123;14400,15100&#125;,&#123;15101,15500&#125;,&#123;15501,16000&#125;,&#123;16001,16300&#125;,&#123;16301,16700&#125;,&#123;16701,16950&#125;,&#123;16951,17150&#125;,&#123;17151,17450&#125;,&#123;17451,17830&#125;,&#123;17831 ,18040&#125;,&#123;18041,18140&#125;,&#123;18141,18330&#125;,&#123;18331,18520&#125;,&#123;18521,18725&#125;,&#123;18726,18900&#125;,&#123;18901,19040&#125;,&#123;19041,19130&#125;,&#123;19131,19230&#125;,&#123;19231,19400&#125;,&#123;19401,19500&#125;,&#123;19501,19620&#125;,&#123;19621,19720&#125;,&#123;19721,19820&#125;,&#123;19821,19910&#125;,&#123;19911,20000&#125;,&#123;20001,20055&#125;,&#123;20056,20130&#125;,&#123;20131,20220&#125;,&#123;20221,20300&#125;,&#123;20301,20555&#125;&#125;;
///打表的数据
char str1[] = &quot;-paper&quot;;
char str2[] = &quot;cutting-out&quot;;
char str3[]=&quot;HAPPY-DAY&quot;;
///LCD显示的内容
int light=13;
int lamp1=2;
int lamp2=3;
int buzzer = 12;
int kl[4] = &#123; 4,5, 6, 7&#125;;            //行线引脚定义
int kc[4] = &#123; 8,9, 10, 11&#125;;         //列线引脚定义
int key = 0;                          //键值
int key1 = 0;                         //判断按键是否释放标志
int key_l;                            //行
int key_c;                            //列
int flag = 0;                         //有键按下标志
#define FDC2X14_Address 0x2A
#define FDC2X14_W FDC2X14_Address&lt;&lt;1
#define FDC2X14_R (FDC2X14_Address&lt;&lt;1)+1
#define DATA_CH0 0x00
#define DATA_LSB_CH0 0x01
#define DATA_CH1 0x02
#define DATA_LSB_CH1 0x03
#define DATA_CH2 0x04
#define DATA_LSB_CH2 0x05
#define DATA_CH3 0x06
#define DATA_LSB_CH3 0x07
#define RCOUNT_CH0 0x08
#define RCOUNT_CH1 0x09
#define RCOUNT_CH2 0x0A
#define RCOUNT_CH3 0x0B
#define OFFSET_CH0 0x0C
#define OFFSET_CH1 0x0D
#define OFFSET_CH2 0x0E
#define OFFSET_CH3 0x0F
#define SETTLECOUNT_CH0 0x10
#define SETTLECOUNT_CH1 0x11
#define SETTLECOUNT_CH2 0x12
#define SETTLECOUNT_CH3 0x13
#define CLOCK_DIVIDERS_C_CH0 0x14
#define CLOCK_DIVIDERS_C_CH1 0x15
#define CLOCK_DIVIDERS_C_CH2 0x16
#define CLOCK_DIVIDERS_C_CH3 0x17
#define STATUS 0x18
#define ERROR_CONFIG 0x19
#define CONFIG 0x1A
#define MUX_CONFIG 0x1B
#define RESET_DEV 0x1C
#define DRIVE_CURRENT_CH0 0x1E
#define DRIVE_CURRENT_CH1 0x1F
#define DRIVE_CURRENT_CH2 0x20
#define DRIVE_CURRENT_CH3 0x21
#define MANUFACTURER_ID 0x7E
#define DEVICE_ID 0x7F
///宏定义初始值
int LDC131x_W_Reg(unsigned int addr, unsigned int data);   /* 写1个数据到 LDC1314 寄存器 */

int LDC131x_R_Reg(unsigned int addr, unsigned int *data);  /* 读1个数据从 LDC1314 寄存器 */

void LDC131x_Read_CHx(unsigned int CHx, unsigned int *data);   /* 读取单通道 */
void LDC131x_Read_4CH();  /* 读取4个通道 */

void LDC131x_Init();     /* LDC1314 初始化 */
int LDC131x_IIC_Test();  /* iic 总线读写测试 成功返回 0 */

unsigned int CHx_Data[4] = &#123;0, 0, 0, 0&#125;;

int LDC131x_IIC_Test()
&#123;
  unsigned int res = 0x00;
  LDC131x_R_Reg(0x7F, &amp;res);
  return (res == (unsigned int)0x3054) ? 0 : 1;
&#125;
void LDC131x_Init()
&#123;
  unsigned int k;
  Wire.begin();

  LDC131x_W_Reg(RCOUNT_CH0, 0x30, 0xCB);
  LDC131x_W_Reg(RCOUNT_CH1, 0x30, 0xCB);


  LDC131x_W_Reg(CLOCK_DIVIDERS_C_CH0, 0x20, 0x01);
  LDC131x_W_Reg(CLOCK_DIVIDERS_C_CH1, 0x20, 0x01);


  LDC131x_W_Reg(SETTLECOUNT_CH0, 0x00, 0x19);
  LDC131x_W_Reg(SETTLECOUNT_CH1, 0x00, 0x19);


  LDC131x_W_Reg(ERROR_CONFIG, 0x00, 0x00);

  LDC131x_W_Reg(MUX_CONFIG, 0x82, 0x0c);

  LDC131x_W_Reg(DRIVE_CURRENT_CH0, 0x50, 0x00);
  LDC131x_W_Reg(DRIVE_CURRENT_CH1, 0x50, 0x00);

  LDC131x_W_Reg(CONFIG, 0x14, 0x01);

  delay(100);
&#125;
int LDC131x_W_Reg(unsigned int addr, unsigned char data1, unsigned char data2)
&#123;
  int res = -1;

  //申请I2C总线,寻访EEPROM，提供写信号
  Wire.beginTransmission(FDC2X14_Address);

  //给出要写的地址
  Wire.write( addr );

  //提供数据
  Wire.write( data1 );
  Wire.write( data2 );

  //停止I2C
  res =  Wire.endTransmission();

  return res;
&#125;
int LDC131x_R_Reg(unsigned int addr, unsigned int *data)
&#123;
  int res = -1;
  *data = 0x00;

  //申请I2C总线,寻访EEPROM，提供写信号
  Wire.beginTransmission(FDC2X14_Address);

  //提供要读的地址
  Wire.write( addr );

  Wire.endTransmission();

  Wire.requestFrom(FDC2X14_Address, 2);

  while ( Wire.available() == 0 );
  *data = Wire.read();
  *data &lt;&lt;= 8;
  *data |= Wire.read();

  //停止I2C
  res = Wire.endTransmission();

  return res;
&#125;

void LDC131x_Read_CHx(unsigned int CHx, unsigned int *data) /* 读取单通道 */
&#123;
  unsigned int res = 0x0000;
  do &#123;
    LDC131x_R_Reg(STATUS, &amp;res);
  &#125; while ( !( res &amp; 0x0040 ) );
  LDC131x_R_Reg(CHx, data);
&#125;
void LDC131x_Read_4CH() /* 读取4个通道 */
&#123;
  unsigned int res = 0x0000;
  do &#123;
    LDC131x_R_Reg(STATUS, &amp;res);
  &#125; while ( !( res &amp; 0x0040 ) );
  LDC131x_R_Reg(DATA_CH0, &amp;CHx_Data[0]);
  LDC131x_R_Reg(DATA_CH1, &amp;CHx_Data[1]);
  LDC131x_R_Reg(DATA_CH2, &amp;CHx_Data[2]);
  LDC131x_R_Reg(DATA_CH3, &amp;CHx_Data[3]);
&#125;
void setup()
&#123;
  Serial.begin(9600);
  LDC131x_Init();
  //Wire.begin();
  lcd.initial_LCD1602();
  pinMode(light,OUTPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(lamp1,OUTPUT);
  pinMode(lamp2,OUTPUT);
&#125;

void loop()
&#123;

  // delay(1000);
  read_key();
  unsigned int HSB = 0x00;
  unsigned int LSB = 0x00;
  unsigned long int val = 0x00;
  //LDC131x_Read_4CH();
#if 0
  Serial.print(CHx_Data[0] / 4096.0 * 10 * 2); Serial.print(&quot; &quot;);
  Serial.print(CHx_Data[1] / 4096.0 * 10 * 2); Serial.print(&quot; &quot;);
  Serial.print(CHx_Data[2] / 4096.0 * 10 * 2); Serial.print(&quot; &quot;);
  Serial.print(CHx_Data[3] / 4096.0 * 10 * 2); Serial.println(&quot; &quot;);
#elif 0
  Serial.print(CHx_Data[0]); Serial.print(&quot;,&quot;);
  Serial.print(CHx_Data[1]); Serial.print(&quot;,&quot;);
  Serial.print(CHx_Data[2]); Serial.println(&quot;,&quot;);
#elif 1
  LDC131x_R_Reg(0x02, &amp;HSB);
  LDC131x_R_Reg(0x03, &amp;LSB);
  val = (((unsigned long int)HSB &amp; 0xFFF) &lt;&lt; 16) + LSB;
  Serial.print(HSB &amp; 0xFFF);//前三位
  LSB/=1000;
     Serial.println(LSB);//后四位
     int temp=HSB &amp; 0xFFF;
     int temp2=LSB;
     int ans=temp*100+temp2;
     int ans_t;///真正判断的答案即下标
     Serial.println(&quot;678&quot;);
     Serial.println(ans);
  int dat = (int)HSB &amp; 0xFFF;
  //delay(2000);
  if(key!=0)&#123;
    if(key==1)//检验5
    &#123;
      ///检验是否进入检验
        for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
    while(ans_t!=5)&#123;
        for(int i=0;i&lt;20;i++)
    &#123;
      if(ans&gt;=arr[i].l&amp;&amp;ans&lt;=arr[i].r)
      &#123;
        ans_t=i+1;
        break;
      &#125;
      &#125;
      if(ans_t!=5)///判断差距（因为数据可能会受到地理环境的影响，数据整体会跳动，避免在某个正确区间跳出，所以要通过数据范围减少或者增加，来保证已存数据无误，下面一样）
      &#123;
      if(ans_t&gt;5)
      &#123;
        for(int i=0;i&lt;20;i++)
        &#123;
          arr[i].l+=50;
          arr[i].r+=50;
        &#125;
      &#125;
      else if(ans_t&lt;5)
      &#123;
        for(int i=0;i&lt;20;i++)&#123;
        arr[i].l-=50;
        arr[i].r-=50;
        &#125;
      &#125;
      &#125;
      else&#123;
       int l_d=ans-arr[4].l;
       int r_d=arr[4].r-ans;
       while(l_d&lt;=35||r_d&lt;=35)&#123;
       if(l_d&lt;=35)
       &#123;
        for(int i=0;i&lt;31;i++)
        &#123;
          arr[i].l-=20;
          arr[i].r-=20;
        &#125;
       &#125;
              if(r_d&lt;=35)
       &#123;
        for(int i=0;i&lt;31;i++)
        &#123;
          arr[i].r+=20;
          arr[i].l+=20;
        &#125;
      &#125;
       &#125;
    &#125;
        ///检验是否成功退出
    for(int i=0;i&lt;80;i++)
    &#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
    for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
    key=0;
    &#125;
    &#125;
  else     if(key==2)//检验10
    &#123;
      ///检验是否进入检验
        for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
    while(ans_t!=10)&#123;
        for(int i=0;i&lt;20;i++)
    &#123;
      if(ans&gt;=arr[i].l&amp;&amp;ans&lt;=arr[i].r)
      &#123;
        ans_t=i+1;
        break;
      &#125;
      &#125;
      if(ans_t!=10)///判断差距
      &#123;
      if(ans_t&gt;10)
      &#123;
        for(int i=0;i&lt;20;i++)
        &#123;
          arr[i].l+=50;
          arr[i].r+=50;
        &#125;
      &#125;
      else if(ans_t&lt;10)
      &#123;
        for(int i=0;i&lt;20;i++)&#123;
        arr[i].l-=50;
        arr[i].r-=50;
        &#125;
      &#125;
      &#125;
      else&#123;
       int l_d=ans-arr[4].l;
       int r_d=arr[4].r-ans;
       while(l_d&lt;=35||r_d&lt;=35)&#123;
       if(l_d&lt;=35)
       &#123;
        for(int i=0;i&lt;31;i++)
        &#123;
          arr[i].l-=20;
          arr[i].r-=20;
        &#125;
       &#125;
              if(r_d&lt;=35)
       &#123;
        for(int i=0;i&lt;31;i++)
        &#123;
          arr[i].r+=20;
          arr[i].l+=20;
        &#125;
      &#125;
       &#125;
    &#125;
        ///检验是否成功退出
    for(int i=0;i&lt;80;i++)
    &#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
    for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
    key=0;
    &#125;
    &#125;
 else     if(key==3)//检验15
    &#123;
      ///检验是否进入检验
        for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
    while(ans_t!=15)&#123;
        for(int i=0;i&lt;20;i++)
    &#123;
      if(ans&gt;=arr[i].l&amp;&amp;ans&lt;=arr[i].r)
      &#123;
        ans_t=i+1;
        break;
      &#125;
      &#125;
      if(ans_t!=15)///判断差距
      &#123;
      if(ans_t&gt;15)
      &#123;
        for(int i=0;i&lt;20;i++)
        &#123;
          arr[i].l+=50;
          arr[i].r+=50;
        &#125;
      &#125;
      else if(ans_t&lt;15)
      &#123;
        for(int i=0;i&lt;20;i++)&#123;
        arr[i].l-=50;
        arr[i].r-=50;
        &#125;
      &#125;
      &#125;
      else&#123;
       int l_d=ans-arr[4].l;
       int r_d=arr[4].r-ans;
       while(l_d&lt;=35||r_d&lt;=35)&#123;
       if(l_d&lt;=35)
       &#123;
        for(int i=0;i&lt;31;i++)
        &#123;
          arr[i].l-=20;
          arr[i].r-=20;
        &#125;
       &#125;
              if(r_d&lt;=35)
       &#123;
        for(int i=0;i&lt;31;i++)
        &#123;
          arr[i].r+=20;
          arr[i].l+=20;
        &#125;
      &#125;
       &#125;
    &#125;
        ///检验是否成功退出
    for(int i=0;i&lt;80;i++)
    &#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
    for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
    key=0;
    &#125;
    &#125;
    else if(key==4)///检验20
  &#123;
        ///检验是否进入检验
        for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
        while(ans_t!=20)&#123;
        for(int i=15;i&lt;20;i++)
    &#123;
      if(ans&gt;=arr[i].l&amp;&amp;ans&lt;=arr[i].r)
      &#123;
        ans_t=i+1;
        break;
      &#125;
      &#125;
      if(ans_t!=20)&#123;
      if(ans_t&gt;20)
      &#123;
        for(int i=15;i&lt;20;i++)
        &#123;
          arr[i].l+=50;
          arr[i].r+=50;
        &#125;
      &#125;
      else if(ans_t&lt;20)
      &#123;
        for(int i=15;i&lt;20;i++)&#123;
        arr[i].l-=50;
        arr[i].r-=50;
                &#125;
      &#125;
    &#125;
        else&#123;   
          Serial.println(&quot;chne&quot;);    
       int l_d=ans-arr[19].l;
       int r_d=arr[19].r-ans;
            while(l_d&lt;=35||r_d&lt;=35)&#123;

       if(l_d&lt;=35)
       &#123;
        for(int i=15;i&lt;20;i++)
        &#123;
          arr[i].l-=20;
          arr[i].r-=20;
        &#125;
       &#125;
              if(r_d&lt;=35)
       &#123;
        for(int i=15;i&lt;20;i++)
        &#123;
          arr[i].r+=20;
          arr[i].l+=20;
        &#125;
      &#125;
            &#125;
    &#125;   

    key=0;
  &#125;    ///检验是否成功退出
    for(int i=0;i&lt;80;i++)
    &#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
    for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
  &#125;
     else if(key==5)///检验25
  &#123;
        ///检验是否进入检验
        for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
        while(ans_t!=25)&#123;
        for(int i=0;i&lt;31;i++)
    &#123;
      if(ans&gt;=arr[i].l&amp;&amp;ans&lt;=arr[i].r)
      &#123;
        ans_t=i+1;
        break;
      &#125;
      &#125;
      if(ans_t!=25)&#123;
      if(ans_t&gt;25)
      &#123;
        for(int i=0;i&lt;31;i++)
        &#123;
          arr[i].l+=50;
          arr[i].r+=50;
        &#125;
      &#125;
      else if(ans_t&lt;20)
      &#123;
                for(int i=0;i&lt;31;i++)&#123;
        arr[i].l-=50;
        arr[i].r-=50;
                &#125;
      &#125;
    &#125;
           else&#123;
       int l_d=ans-arr[24].l;
       int r_d=arr[24].r-ans;
            while(l_d&lt;=35||r_d&lt;=35)&#123;
       if(l_d&lt;=35)
       &#123;
        for(int i=0;i&lt;31;i++)
        &#123;
          arr[i].l-=20;
          arr[i].r-=20;
        &#125;
       &#125;
              if(r_d&lt;=35)
       &#123;
        for(int i=0;i&lt;31;i++)
        &#123;
          arr[i].r+=20;
          arr[i].l+=20;
        &#125;
      &#125;
            &#125;
    &#125;   
    ///检验是否成功退出
    for(int i=0;i&lt;80;i++)
    &#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
    for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
    key=0;
  &#125;
  &#125;
     else if(key==6)///检验30
  &#123;
        ///检验是否进入检验
        for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
        while(ans_t!=30)&#123;
        for(int i=0;i&lt;31;i++)
    &#123;
      if(ans&gt;=arr[i].l&amp;&amp;ans&lt;=arr[i].r)
      &#123;
        ans_t=i+1;
        break;
      &#125;
      &#125;
      if(ans_t!=30)&#123;
      if(ans_t&gt;30)
      &#123;
        for(int i=0;i&lt;31;i++)
        &#123;
          arr[i].l+=50;
          arr[i].r+=50;
        &#125;
      &#125;
      else if(ans_t&lt;30)
      &#123;
                for(int i=0;i&lt;31;i++)&#123;
        arr[i].l-=50;
        arr[i].r-=50;
                &#125;
      &#125;
    &#125;
           else&#123;       int l_d=ans-arr[29].l;
       int r_d=arr[29].r-ans;
            while(l_d&lt;=35||r_d&lt;=35)&#123;

       if(l_d&lt;=35)
       &#123;
        for(int i=0;i&lt;31;i++)
        &#123;
          arr[i].l-=20;
          arr[i].r-=20;
        &#125;
       &#125;
              if(r_d&lt;=35)
       &#123;
        for(int i=0;i&lt;31;i++)
        &#123;
          arr[i].r+=20;
          arr[i].l+=20;
        &#125;
      &#125;
            &#125;
    &#125;   
    ///检验是否成功退出

    key=0;
  &#125;    for(int i=0;i&lt;80;i++)
    &#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发    声音        
    delay(1);//延时 ms
    &#125;
    for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    &#125;
  &#125;
  else
  &#123;
    lcd.clear();
    digitalWrite(lamp1,HIGH);
    delay(1000);
    digitalWrite(lamp1,LOW);
      if (dat &lt;=205) &#123;
    lcd.SET_XY(2, 0);
    for(int i=0;i&lt;31;i++)
    &#123;
      if(ans&gt;=arr[i].l&amp;&amp;ans&lt;=arr[i].r)
      &#123;
        ans_t=i+1;
        break;
      &#125;
      &#125;
    lcd.Write_data(ans_t, 0);
    lcd.Write_String(str1);
    //digitalWrite(lamp1,LOW);
    // Serial.println(&quot;666&quot;);
//
 lcd.SET_XY(2,1);
//    // int a=LSB;
lcd.Write_String(str3); //第二行打印暂时无用
    for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    key=0;
  &#125;
      &#125;
  else &#123;  
    lcd.clear();
    lcd.SET_XY(2, 0);
    lcd.Write_String(str2);
   // lcd.Write_String();
    digitalWrite(lamp1,HIGH);//灯
    for(int i=0;i&lt;80;i++)&#123;
    digitalWrite(buzzer, HIGH); //发声音        
    delay(1);//延时1ms        
    digitalWrite(buzzer,LOW);//不发声音        
    delay(1);//延时 ms
    key=0;
  &#125;
  &#125;
  &#125;
  &#125;   
#else
  LDC131x_R_Reg(0x7f, &amp;LSB);
  Serial.println(LSB, HEX);
#endif
  delay(100);
&#125;



void read_key()//
&#123;
  for (int i = 0; i &lt; 4; i++)             //行输出低，列输入
  &#123;
    pinMode(kl[i], OUTPUT);
    digitalWrite(kl[i], LOW);
    pinMode(kc[i], INPUT_PULLUP);
  &#125;
  delay(5);                               //等待稳定
  for (int k = 0; k &lt; 4; k++)
  &#123;
    if (!digitalRead(kc[k]))              //有键按下
    &#123;
      delay(20);                          //延时消抖动
      if (!digitalRead(kc[k]))            //再次判断有键按下
      &#123;
        key_c = k;                        //记录列值
        flag = 1;                         //设有键标志
      &#125;
      else flag = 0;
    &#125;
  &#125;
  if (flag == 1)
  &#123;
    for (int n = 0; n &lt; 4; n++)          //列输出低，行输入
    &#123;
      pinMode(kc[n], OUTPUT);
      digitalWrite(kc[n], LOW);
      pinMode(kl[n], INPUT_PULLUP);


    &#125;
    delay(5);
    for (int j = 0; j &lt; 4; j++)
    &#123;
      if (!digitalRead(kl[j]))
      &#123;
        key_l = j;                        //记录行值
        key = key_l * 4 + key_c + 1;      //计算键值
        flag = 0;
      &#125;
    &#125;
  &#125;
  if (key1 != key)                        //判断按键是否释放
    key1 = key;
  else
    key = 0;
&#125;</code></pre>
<h2 id="比赛结果："><a href="#比赛结果：" class="headerlink" title="比赛结果："></a>比赛结果：</h2><p>测试结果还是比较令人满意的，但是因为铜片是自己手工制作不太精准多或者少了几毫米，线的长度也长了七毫米（希望成绩不要作废QAQ,这三天睡眠没有超过12小时，没功劳也有苦劳QWQ），下次一定要严格按照标准来进行。</p>
<h2 id="比赛收获："><a href="#比赛收获：" class="headerlink" title="比赛收获："></a>比赛收获：</h2><p>总之比赛完还是挺爽的，体会到那种累的不想动弹的感觉。人生的宝贵财富。<br>下一年加油哈。</p>
<h2 id="比赛结果：-1"><a href="#比赛结果：-1" class="headerlink" title="比赛结果："></a>比赛结果：</h2><p>额，果然不出所料，没拿奖，哎~~，就因为那个线比比赛要求长了五毫米（通宵三天泡在实验室，努力与汗水都付之东流，心里满满的不甘，难受，Orz）,也没办法，只能怪自己不细心吧，没能按照要求，这可能也是未来的社会所要求的吧，没有规矩不成方圆，不过这些所谓的规矩到底是真的起到了提高拔优的作用，还是说扼杀了一些更好的创意与想法。（不知所言）。（补写于2019-9-3，20：51）</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>守护进程</title>
    <url>/2020/08/06/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="守护进程的定义："><a href="#守护进程的定义：" class="headerlink" title="守护进程的定义："></a>守护进程的定义：</h1><p>Daemon(精灵)进程，是LInux中的后台服务进程，通常独立于来控制终端并周期性的执行某种任务或等待处理某些发生的事件，一般采用d结尾的名字。<br>（可以vim /etc/passwd,来查看一下已有的一些守护进程）。</p>
<h2 id="创建守护进程的基本模型："><a href="#创建守护进程的基本模型：" class="headerlink" title="创建守护进程的基本模型："></a>创建守护进程的基本模型：</h2><pre><code>1.创建子进程，父进程退出
    所有工作在子进程中进行形式脱离了控制终端
2.在子进程中创建新的会话
    setsid函数
    使子进程完全独立出来，脱离控制
3.改变当前目录为根目录
    chdir（）函数
    也可以换成其他路径
4.重设文件掩码
    unmask()
    防止继承的文件创建屏蔽字拒绝某些权限
    增加守护进程的灵活性
5.关闭文件描述符
    由于前三个文件描述符都是与终端有关，所以可以将其关闭。
    （但是由于关闭后会导致再次使用open函数时会从0文件描述符开始，和之前的使用习惯相悖，所以很多人都是将前三个文件的文件描述符重定向（dup2）到/dev/null（黑洞））
6.守护进程的主逻辑
7.守护进程的退出（但是一般不用退出）</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>导航 - 分享</tag>
      </tags>
  </entry>
</search>
